<!-- Configuración del Sistema -->
<style>
/* Estilos para mejorar visibilidad de tabs */
.nav-tabs .nav-link {
    color: #495057 !important;
    background-color: #f8f9fa !important;
    border: 1px solid #dee2e6 !important;
    border-bottom: none !important;
    font-weight: 500;
}

.nav-tabs .nav-link:hover {
    color: #007bff !important;
    background-color: #e9ecef !important;
    border-color: #dee2e6 #dee2e6 #007bff !important;
}

.nav-tabs .nav-link.active {
    color: #fff !important;
    background-color: #007bff !important;
    border-color: #007bff #007bff #fff !important;
    font-weight: 600;
}

.nav-tabs {
    border-bottom: 2px solid #007bff !important;
}

.tab-content {
    border: 1px solid #dee2e6;
    border-top: none;
    padding: 20px;
    background-color: #fff;
}

/* Estilos para tarjetas de asignación */
.assignment-type-card {
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid #dee2e6 !important;
}

.assignment-type-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.assignment-type-card.border-primary {
    border-color: #007bff !important;
    background-color: rgba(0, 123, 255, 0.05) !important;
}

.assignment-type-card.border-success {
    border-color: #28a745 !important;
    background-color: rgba(40, 167, 69, 0.05) !important;
}

/* Estilos para el buscador de usuarios */
.user-item {
    transition: all 0.2s ease;
    border-radius: 8px;
    padding: 8px;
    margin-bottom: 8px !important;
}

.user-item:hover {
    background-color: #f8f9fa;
}

.user-item input[type="checkbox"]:checked + label {
    background-color: rgba(0, 123, 255, 0.1);
    border-radius: 6px;
    padding: 4px 8px;
}

/* Estilos para tareas temporales */
.temporary-task-card {
    border-left: 4px solid #ffc107 !important;
    background: linear-gradient(135deg, #fff9e6 0%, #ffffff 100%);
    transition: all 0.3s ease;
}

.temporary-task-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255, 193, 7, 0.3);
}

.temporary-task-urgent {
    border-left-color: #dc3545 !important;
    background: linear-gradient(135deg, #ffe6e6 0%, #ffffff 100%);
}

.temporary-task-high {
    border-left-color: #fd7e14 !important;
    background: linear-gradient(135deg, #fff3e0 0%, #ffffff 100%);
}

.temporary-task-normal {
    border-left-color: #28a745 !important;
    background: linear-gradient(135deg, #e8f5e8 0%, #ffffff 100%);
}

/* Estilos para botones de días */
.day-btn {
    transition: all 0.3s ease;
    min-width: 80px;
}

.day-btn.active {
    background-color: #007bff !important;
    border-color: #007bff !important;
    color: white !important;
    transform: scale(1.05);
}

.day-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,123,255,0.3);
}

/* Estilos para vista previa */
#tempTaskPreview {
    min-height: 100px;
    transition: all 0.3s ease;
}

.temp-preview-card {
    border: 2px dashed #dee2e6;
    border-radius: 8px;
    padding: 15px;
    background: #f8f9fa;
}

.temp-preview-card.active {
    border-color: #007bff;
    background: #e3f2fd;
}

/* Animaciones */
@keyframes pulse-warning {
    0% { box-shadow: 0 0 0 0 rgba(255, 193, 7, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(255, 193, 7, 0); }
    100% { box-shadow: 0 0 0 0 rgba(255, 193, 7, 0); }
}

.temporary-task-pulse {
    animation: pulse-warning 2s infinite;
}
</style>

<div class="row">
  <div class="col-12">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title">
          <i class="fas fa-cog me-2"></i>
          Configuración del Sistema
        </h5>
      </div>
      <div class="card-body">
        <!-- Tabs de navegación -->
        <ul class="nav nav-tabs" id="configTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="employees-tab" data-bs-toggle="tab" data-bs-target="#employees" type="button" role="tab">
              <i class="fas fa-users me-1"></i>
              Empleados
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="tasks-tab" data-bs-toggle="tab" data-bs-target="#tasks" type="button" role="tab">
              <i class="fas fa-tasks me-1"></i>
              Tareas
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="departments-tab" data-bs-toggle="tab" data-bs-target="#departments" type="button" role="tab">
              <i class="fas fa-building me-1"></i>
              Departamentos
            </button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="tags-tab" data-bs-toggle="tab" data-bs-target="#tags" type="button" role="tab">
              <i class="fas fa-tags me-1"></i>
              Etiquetas
            </button>
          </li>
        </ul>

        <!-- Contenido de los tabs -->
        <div class="tab-content" id="configTabsContent">
          <!-- Tab Empleados -->
          <div class="tab-pane fade show active" id="employees" role="tabpanel">
            <div class="d-flex justify-content-between align-items-center mb-3 mt-3">
              <h5 class="mb-0">Gestión de Empleados</h5>
              <button class="btn btn-primary" onclick="showAddEmployeeModal()">
                <i class="fas fa-plus me-1"></i>Agregar Empleado
              </button>
            </div>
            
            <div id="employees-container">
              <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2 text-muted">Cargando empleados...</p>
              </div>
            </div>
          </div>

          <!-- Tab Tareas -->
          <div class="tab-pane fade" id="tasks" role="tabpanel">
            <div class="d-flex justify-content-between align-items-center mb-3 mt-3">
              <h5 class="mb-0">Gestión de Tareas</h5>
              <div class="btn-group" role="group">
              <button class="btn btn-primary" onclick="showAddTaskModal()">
                <i class="fas fa-plus me-1"></i>Agregar Tarea
              </button>
                <button class="btn btn-warning" onclick="showAddTemporaryTaskModal()">
                  <i class="fas fa-clock me-1"></i>Tarea Temporal
              </button>
              </div>
            </div>
            
            <div id="tasksContainer">
              <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2 text-muted">Cargando tareas...</p>
              </div>
            </div>
          </div>

          <!-- Tab Departamentos -->
          <div class="tab-pane fade" id="departments" role="tabpanel">
            <div class="d-flex justify-content-between align-items-center mb-3 mt-3">
              <h5 class="mb-0">Gestión de Departamentos</h5>
              <button class="btn btn-primary" onclick="showAddDepartmentModal()">
                <i class="fas fa-plus me-1"></i>Agregar Departamento
              </button>
            </div>
            
            <div id="departments-container">
              <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2 text-muted">Cargando departamentos...</p>
              </div>
            </div>
          </div>

          <!-- Tab Etiquetas -->
          <div class="tab-pane fade" id="tags" role="tabpanel">
            <div class="d-flex justify-content-between align-items-center mb-3 mt-3">
              <h5 class="mb-0">Gestión de Etiquetas</h5>
              <button class="btn btn-primary" onclick="showAddTagModal()">
                <i class="fas fa-plus me-1"></i>Agregar Etiqueta
              </button>
            </div>
            
            <div id="tags-container">
              <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2 text-muted">Cargando etiquetas...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modales -->
<!-- Modal Agregar Empleado -->
<div class="modal fade" id="addEmployeeModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Agregar Nuevo Empleado</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addEmployeeForm">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="employeeName" class="form-label">Nombre Completo *</label>
                <input type="text" class="form-control" id="employeeName" required>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="employeeEmail" class="form-label">Correo Electrónico *</label>
                <input type="email" class="form-control" id="employeeEmail" required>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="employeeRole" class="form-label">Rol *</label>
                <select class="form-select" id="employeeRole" required>
                  <option value="">Seleccionar rol</option>
                  <option value="0">Admin</option>
                  <option value="1">Supervisor</option>
                  <option value="2">Empleado</option>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="employeeDepartment" class="form-label">Departamento *</label>
                <select class="form-select" id="employeeDepartment" required>
                  <option value="">Cargando departamentos...</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="employeePosition" class="form-label">Cargo</label>
                <input type="text" class="form-control" id="employeePosition">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Enlazar con Usuario del Sistema</label>
                <div class="input-group">
                  <input type="text" class="form-control" id="employeeSystemUserDisplay" placeholder="Sin usuario enlazado" readonly>
                  <input type="hidden" id="employeeSystemUser" value="">
                  <button class="btn btn-outline-secondary" type="button" onclick="openUserSearchModal('add')">
                    <i class="fas fa-search me-1"></i>
                    Buscar Usuario
                  </button>
                  <button class="btn btn-outline-danger" type="button" onclick="clearUserSelection('add')" style="display: none;" id="clearUserBtnAdd">
                    <i class="fas fa-times"></i>
                  </button>
                </div>
                <div class="form-text">
                  <i class="fas fa-info-circle me-1"></i>
                  Busca y selecciona un usuario del sistema principal para crear el enlace
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" onclick="saveEmployee()">
          <i class="fas fa-save me-1"></i>Guardar Empleado
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal Editar Empleado -->
<div class="modal fade" id="editEmployeeModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Editar Empleado</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editEmployeeForm">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="editEmployeeName" class="form-label">Nombre Completo *</label>
                <input type="text" class="form-control" id="editEmployeeName" required>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="editEmployeeEmail" class="form-label">Correo Electrónico *</label>
                <input type="email" class="form-control" id="editEmployeeEmail" required>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="editEmployeeRole" class="form-label">Rol *</label>
                <select class="form-select" id="editEmployeeRole" required>
                  <option value="">Seleccionar rol</option>
                  <option value="0">Admin</option>
                  <option value="1">Supervisor</option>
                  <option value="3">Empleado</option>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="editEmployeeDepartment" class="form-label">Departamento *</label>
                <select class="form-select" id="editEmployeeDepartment" required>
                  <option value="">Cargando departamentos...</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="editEmployeePosition" class="form-label">Cargo</label>
            <input type="text" class="form-control" id="editEmployeePosition">
          </div>
          
          <div class="mb-3">
            <label class="form-label">Enlazar con Usuario del Sistema</label>
            <div class="input-group">
              <input type="text" class="form-control" id="editEmployeeSystemUserDisplay" placeholder="Sin usuario enlazado" readonly>
              <input type="hidden" id="editEmployeeSystemUser" value="">
              <button class="btn btn-outline-secondary" type="button" onclick="openUserSearchModal('edit')">
                <i class="fas fa-search me-1"></i>
                Buscar Usuario
              </button>
              <button class="btn btn-outline-danger" type="button" onclick="clearUserSelection('edit')" style="display: none;" id="clearUserBtnEdit">
                <i class="fas fa-times"></i>
              </button>
            </div>
            <div class="form-text">Opcional: Busca y selecciona un usuario del sistema principal para crear el enlace</div>
          </div>
          
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="editEmployeeActive" checked>
              <label class="form-check-label" for="editEmployeeActive">
                Empleado activo
              </label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" onclick="updateEmployee()">
          <i class="fas fa-save me-1"></i>Actualizar Empleado
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal Agregar Tarea Temporal -->
<div class="modal fade" id="addTemporaryTaskModal" tabindex="-1">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header bg-warning text-dark">
        <h5 class="modal-title">
          <i class="fas fa-clock me-2"></i>Crear Tarea Temporal
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addTemporaryTaskForm">
          <!-- Información básica -->
          <div class="row mb-4">
            <div class="col-12">
              <div class="alert alert-info d-flex align-items-center">
                <i class="fas fa-info-circle me-2"></i>
                <div>
                  <strong>💡 Tarea Temporal:</strong> Se crea para un día específico o rango de fechas y se elimina automáticamente al completarse o expirar.
                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-8">
              <div class="mb-3">
                <label for="tempTaskTitle" class="form-label">Título de la Tarea *</label>
                <input type="text" class="form-control" id="tempTaskTitle" required placeholder="Ej: Ir al banco a consultar sobre préstamo">
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label for="tempTaskPriority" class="form-label">Prioridad</label>
                <select class="form-select" id="tempTaskPriority">
                  <option value="normal">🟢 Normal</option>
                  <option value="high">🟡 Alta</option>
                  <option value="urgent">🔴 Urgente</option>
                </select>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-12">
              <div class="mb-3">
                <label for="tempTaskDescription" class="form-label">Descripción</label>
                <textarea class="form-control" id="tempTaskDescription" rows="3" placeholder="Detalles específicos de la tarea..."></textarea>
              </div>
            </div>
          </div>

          <!-- Configuración de tiempo -->
          <div class="row mb-4">
            <div class="col-12">
              <h6 class="text-primary mb-3">
                <i class="fas fa-calendar-alt me-2"></i>Configuración de Tiempo
              </h6>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label for="tempTaskType" class="form-label">Tipo de Tarea *</label>
                <select class="form-select" id="tempTaskType" onchange="updateTemporaryTaskType()">
                  <option value="single">📅 Un solo día</option>
                  <option value="range">📆 Rango de fechas</option>
                  <option value="recurring">🔄 Días específicos</option>
                </select>
              </div>
            </div>
            <div class="col-md-4" id="tempSingleDateContainer">
              <div class="mb-3">
                <label for="tempTaskSingleDate" class="form-label">Fecha *</label>
                <input type="date" class="form-control" id="tempTaskSingleDate" required>
              </div>
            </div>
            <div class="col-md-4" id="tempTimeContainer">
              <div class="mb-3">
                <label for="tempTaskTime" class="form-label">Hora límite (opcional)</label>
                <input type="time" class="form-control" id="tempTaskTime" placeholder="Ej: 17:00">
                <div class="form-text">Se ocultará después de esta hora</div>
              </div>
            </div>
          </div>

          <!-- Rango de fechas (oculto por defecto) -->
          <div class="row mb-4" id="tempDateRangeContainer" style="display: none;">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="tempTaskStartDate" class="form-label">Fecha de inicio *</label>
                <input type="date" class="form-control" id="tempTaskStartDate">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="tempTaskEndDate" class="form-label">Fecha de fin *</label>
                <input type="date" class="form-control" id="tempTaskEndDate">
              </div>
            </div>
          </div>

          <!-- Días específicos del mes (oculto por defecto) -->
          <div class="row mb-4" id="tempSpecificDaysContainer" style="display: none;">
            <div class="col-12">
              <div class="mb-3">
                <label class="form-label">Días específicos del mes</label>
                <div id="tempDaysSelectionContainer" class="border rounded p-3">
                  <!-- Los días se generarán dinámicamente -->
                </div>
              </div>
            </div>
          </div>

          <!-- Asignación -->
          <div class="row mb-4">
            <div class="col-12">
              <h6 class="text-primary mb-3">
                <i class="fas fa-users me-2"></i>Asignación
              </h6>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="tempTaskAssignmentType" class="form-label">¿A quién asignar? *</label>
                <select class="form-select" id="tempTaskAssignmentType" onchange="updateTemporaryAssignmentType()">
                  <option value="user">👤 Usuario específico</option>
                  <option value="department">🏢 Departamento completo</option>
                </select>
              </div>
            </div>
            <div class="col-md-6" id="tempUserContainer" style="display: none;">
              <div class="mb-3">
                <label for="tempTaskUser" class="form-label">Usuario</label>
                <select class="form-select" id="tempTaskUser">
                  <option value="">Seleccionar usuario...</option>
                </select>
              </div>
            </div>
            <div class="col-md-6" id="tempDeptContainer" style="display: none;">
              <div class="mb-3">
                <label for="tempTaskDepartment" class="form-label">Departamento</label>
                <select class="form-select" id="tempTaskDepartment">
                  <option value="">Seleccionar departamento...</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Características especiales -->
          <div class="row mb-4">
            <div class="col-12">
              <h6 class="text-primary mb-3">
                <i class="fas fa-star me-2"></i>Características Especiales
              </h6>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Evidencia</label>
                <div class="d-flex gap-2">
                  <button type="button" class="btn btn-outline-success" id="tempTaskEvidenceBtn" onclick="toggleTemporaryEvidenceRequirement()">
                    <i class="fas fa-camera me-1"></i>Requiere Evidencia
                  </button>
                  <button type="button" class="btn btn-secondary" id="tempTaskNoEvidenceBtn" onclick="toggleTemporaryEvidenceRequirement()">
                    <i class="fas fa-times me-1"></i>No Requiere
                  </button>
                </div>
                <input type="hidden" id="tempTaskEvidence" value="false">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Etiquetas</label>
                <div id="tempTaskTags" class="border rounded p-3" style="min-height: 100px;">
                  <div class="text-center text-muted">Cargando etiquetas...</div>
                </div>
              </div>
            </div>
          </div>


          <!-- Vista previa -->
          <div class="row">
            <div class="col-12">
              <div class="card bg-light">
                <div class="card-header">
                  <h6 class="mb-0">
                    <i class="fas fa-eye me-2"></i>Vista Previa
                  </h6>
                </div>
                <div class="card-body">
                  <div id="tempTaskPreview">
                    <p class="text-muted">Completa los campos para ver la vista previa...</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-warning" onclick="saveTemporaryTask()">
          <i class="fas fa-save me-1"></i>Crear Tarea Temporal
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal Agregar Tarea -->
<div class="modal fade" id="addTaskModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Agregar Nueva Tarea</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="addTaskForm">
          <div class="row">
            <div class="col-md-12">
              <div class="mb-3">
                <label for="addTaskTitle" class="form-label">Título de la Tarea *</label>
                <input type="text" class="form-control" id="addTaskTitle" required>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-12">
              <div class="mb-3">
                <label for="addTaskDescription" class="form-label">Descripción</label>
                <textarea class="form-control" id="addTaskDescription" rows="3"></textarea>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="addTaskMode" class="form-label">Modo *</label>
                <select class="form-select" id="addTaskMode" required onchange="updateTaskMode('add')">
                  <option value="binary">Binaria (Sí/No)</option>
                  <option value="counter">Contador</option>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="addTaskPeriodicity" class="form-label">Periodicidad *</label>
                <select class="form-select" id="addTaskPeriodicity" required onchange="updateFrequencyOptions('add')">
                  <option value="daily">Diaria</option>
                  <option value="weekly">Semanal</option>
                  <option value="monthly">Mensual</option>
                  <option value="biweekly">Quincenal</option>
                </select>
              </div>
            </div>
          </div>
          
          
          <!-- Días específicos -->
          <div class="row" id="addSpecificDaysRow" style="display: none;">
            <div class="col-md-12">
              <div class="mb-3">
                <label class="form-label">Días específicos</label>
                <div id="addDaysSelectionContainer" class="border rounded p-3">
                  <!-- Los días se generarán dinámicamente -->
                </div>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6" id="addTaskTargetContainer" style="display: none;">
              <div class="mb-3">
                <label for="addTaskTarget" class="form-label">Veces por día</label>
                <input type="number" class="form-control" id="addTaskTarget" min="1" value="1">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Evidencia</label>
                <div class="d-flex gap-2">
                  <button type="button" class="btn btn-outline-success" id="addTaskEvidenceBtn" onclick="toggleEvidenceRequirement('add')">
                    <i class="fas fa-camera me-1"></i>Requiere Evidencia
                  </button>
                  <button type="button" class="btn btn-outline-secondary" id="addTaskNoEvidenceBtn" onclick="toggleEvidenceRequirement('add')">
                    <i class="fas fa-times me-1"></i>No Requiere
                  </button>
                </div>
                <input type="hidden" id="addTaskEvidence" value="false">
              </div>
            </div>
          </div>
          
          <!-- NUEVA SECCIÓN: Tipo de Asignación -->
          <div class="row mb-4">
            <div class="col-12">
              <label class="form-label">¿Cómo asignar esta tarea? *</label>
          <div class="row">
            <div class="col-md-6">
                  <div class="card border-2 assignment-type-card" onclick="selectAssignmentType('user')" id="userAssignmentCard">
                    <div class="card-body text-center">
                      <i class="fas fa-user fa-2x text-primary mb-2"></i>
                      <h6>Usuarios Específicos</h6>
                      <p class="text-muted small mb-0">Cada usuario seleccionado debe completar individualmente</p>
                </div>
              </div>
            </div>
            <div class="col-md-6">
                  <div class="card border-2 assignment-type-card" onclick="selectAssignmentType('department')" id="departmentAssignmentCard">
                    <div class="card-body text-center">
                      <i class="fas fa-building fa-2x text-success mb-2"></i>
                      <h6>Departamento Completo</h6>
                      <p class="text-muted small mb-0">Todos los empleados del departamento reciben la tarea</p>
                </div>
              </div>
                </div>
              </div>
              <input type="hidden" id="addTaskAssignmentType" required>
            </div>
          </div>
          
          <!-- Contenedor para Asignación por Usuarios -->
          <div id="userAssignmentContainer" style="display: none;">
          <div class="row">
              <div class="col-12">
                <label class="form-label">Seleccionar Usuarios *</label>
                
                <!-- Buscador de Usuarios -->
              <div class="mb-3">
                  <div class="input-group">
                    <span class="input-group-text">
                      <i class="fas fa-search"></i>
                    </span>
                    <input type="text" class="form-control" id="userSearchInput" 
                           placeholder="Buscar usuarios por nombre, cargo o departamento..."
                           onkeyup="filterUsers()">
                    <button class="btn btn-outline-secondary" type="button" onclick="clearUserSearch()">
                      <i class="fas fa-times"></i>
                    </button>
                </div>
              </div>
                
                <!-- Contador de usuarios seleccionados -->
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <small class="text-muted">
                    <span id="selectedUsersCount">0</span> usuarios seleccionados
                  </small>
                  <div class="btn-group btn-group-sm">
                    <button type="button" class="btn btn-outline-primary" onclick="selectAllUsers()">
                      <i class="fas fa-check-double me-1"></i>Todos
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="clearAllUsers()">
                      <i class="fas fa-times me-1"></i>Ninguno
                    </button>
            </div>
                </div>
                
                <!-- Lista de usuarios con scroll -->
                <div id="addTaskUsers" class="border rounded p-3" style="max-height: 300px; overflow-y: auto;">
                  <div class="text-center text-muted py-3">
                    Selecciona un tipo de asignación primero
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Contenedor para Asignación por Departamento -->
          <div id="departmentAssignmentContainer" style="display: none;">
            <div class="row">
              <div class="col-12">
                <label for="addTaskDepartmentSelect" class="form-label">Seleccionar Departamento *</label>
                <select class="form-select" id="addTaskDepartmentSelect">
                  <option value="">Seleccionar departamento...</option>
                </select>
                <div class="alert alert-success mt-2">
                  <i class="fas fa-building me-2"></i>
                  <strong>Asignación automática:</strong> Todos los empleados del departamento recibirán esta tarea.
                </div>
              </div>
            </div>
          </div>

          <!-- Etiquetas -->
          <div class="row">
            <div class="col-12">
              <div class="mb-3">
                <label class="form-label">Etiquetas</label>
                <div id="addTaskTags" class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                  <div class="text-center text-muted">Cargando etiquetas...</div>
                </div>
                <div class="form-text">Las etiquetas ayudan a categorizar y filtrar las tareas</div>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" onclick="saveTask()">
          <i class="fas fa-save me-1"></i>Guardar Tarea
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal Editar Tarea -->
<div class="modal fade" id="editTaskModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Editar Tarea</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="editTaskForm">
          <div class="row">
            <div class="col-md-12">
              <div class="mb-3">
                <label for="editTaskTitle" class="form-label">Título de la Tarea *</label>
                <input type="text" class="form-control" id="editTaskTitle" required>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-12">
              <div class="mb-3">
                <label for="editTaskDescription" class="form-label">Descripción</label>
                <textarea class="form-control" id="editTaskDescription" rows="3"></textarea>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="editTaskMode" class="form-label">Modo *</label>
                <select class="form-select" id="editTaskMode" required onchange="updateTaskMode('edit')">
                  <option value="binary">Binaria (Sí/No)</option>
                  <option value="counter">Contador</option>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="editTaskPeriodicity" class="form-label">Periodicidad *</label>
                <select class="form-select" id="editTaskPeriodicity" required onchange="updateFrequencyOptions('edit')">
                  <option value="daily">Diaria</option>
                  <option value="weekly">Semanal</option>
                  <option value="monthly">Mensual</option>
                  <option value="biweekly">Quincenal</option>
                </select>
              </div>
            </div>
          </div>
          
          
          <!-- Días específicos -->
          <div class="row" id="editSpecificDaysRow" style="display: none;">
            <div class="col-md-12">
              <div class="mb-3">
                <label class="form-label">Días específicos</label>
                <div id="editDaysSelectionContainer" class="border rounded p-3">
                  <!-- Los días se generarán dinámicamente -->
                </div>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6" id="editTaskTargetContainer" style="display: none;">
              <div class="mb-3">
                <label for="editTaskTarget" class="form-label">Veces por día</label>
                <input type="number" class="form-control" id="editTaskTarget" min="1" value="1">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Evidencia</label>
                <div class="d-flex gap-2">
                  <button type="button" class="btn btn-outline-success" id="editTaskEvidenceBtn" onclick="toggleEvidenceRequirement('edit')">
                    <i class="fas fa-camera me-1"></i>Requiere Evidencia
                  </button>
                  <button type="button" class="btn btn-outline-secondary" id="editTaskNoEvidenceBtn" onclick="toggleEvidenceRequirement('edit')">
                    <i class="fas fa-times me-1"></i>No Requiere
                  </button>
                </div>
                <input type="hidden" id="editTaskEvidence" value="false">
              </div>
            </div>
          </div>
          
          <!-- NUEVA SECCIÓN: Tipo de Asignación para Edición -->
          <div class="row mb-4">
            <div class="col-12">
              <label class="form-label">¿Cómo asignar esta tarea? *</label>
          <div class="row">
            <div class="col-md-6">
                  <div class="card border-2 assignment-type-card" onclick="selectEditAssignmentType('user')" id="editUserAssignmentCard">
                    <div class="card-body text-center">
                      <i class="fas fa-user fa-2x text-primary mb-2"></i>
                      <h6>Usuarios Específicos</h6>
                      <p class="text-muted small mb-0">Cada usuario seleccionado debe completar individualmente</p>
                </div>
              </div>
            </div>
            <div class="col-md-6">
                  <div class="card border-2 assignment-type-card" onclick="selectEditAssignmentType('department')" id="editDepartmentAssignmentCard">
                    <div class="card-body text-center">
                      <i class="fas fa-building fa-2x text-success mb-2"></i>
                      <h6>Departamento Completo</h6>
                      <p class="text-muted small mb-0">Todos los empleados del departamento reciben la tarea</p>
                </div>
              </div>
                </div>
              </div>
              <input type="hidden" id="editTaskAssignmentType" required>
            </div>
          </div>
          
          <!-- Contenedor para Asignación por Usuarios en Edición -->
          <div id="editUserAssignmentContainer" style="display: none;">
          <div class="row">
              <div class="col-12">
                <label class="form-label">Seleccionar Usuarios *</label>
                
                <!-- Buscador de Usuarios para Edición -->
              <div class="mb-3">
                  <div class="input-group">
                    <span class="input-group-text">
                      <i class="fas fa-search"></i>
                    </span>
                    <input type="text" class="form-control" id="editUserSearchInput" 
                           placeholder="Buscar usuarios por nombre, cargo o departamento..."
                           onkeyup="filterEditUsers()">
                    <button class="btn btn-outline-secondary" type="button" onclick="clearEditUserSearch()">
                      <i class="fas fa-times"></i>
                    </button>
                </div>
              </div>
                
                <!-- Contador de usuarios seleccionados para edición -->
                <div class="d-flex justify-content-between align-items-center mb-2">
                  <small class="text-muted">
                    <span id="editSelectedUsersCount">0</span> usuarios seleccionados
                  </small>
                  <div class="btn-group btn-group-sm">
                    <button type="button" class="btn btn-outline-primary" onclick="selectAllEditUsers()">
                      <i class="fas fa-check-double me-1"></i>Todos
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="clearAllEditUsers()">
                      <i class="fas fa-times me-1"></i>Ninguno
                    </button>
            </div>
                </div>
                
                <!-- Lista de usuarios con scroll para edición -->
                <div id="editTaskUsers" class="border rounded p-3" style="max-height: 300px; overflow-y: auto;">
                  <div class="text-center text-muted py-3">
                    Selecciona un tipo de asignación primero
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Contenedor para Asignación por Departamento en Edición -->
          <div id="editDepartmentAssignmentContainer" style="display: none;">
            <div class="row">
              <div class="col-12">
                <label for="editTaskDepartmentSelect" class="form-label">Seleccionar Departamento *</label>
                <select class="form-select" id="editTaskDepartmentSelect">
                  <option value="">Seleccionar departamento...</option>
                </select>
                <div class="alert alert-success mt-2">
                  <i class="fas fa-building me-2"></i>
                  <strong>Asignación automática:</strong> Todos los empleados del departamento recibirán esta tarea.
                </div>
              </div>
            </div>
          </div>

          <!-- Etiquetas para Edición -->
          <div class="row">
            <div class="col-12">
              <div class="mb-3">
                <label class="form-label">Etiquetas</label>
                <div id="editTaskTags" class="border rounded p-3" style="max-height: 200px; overflow-y: auto;">
                  <div class="text-center text-muted">Cargando etiquetas...</div>
                </div>
                <div class="form-text">Las etiquetas ayudan a categorizar y filtrar las tareas</div>
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" onclick="updateTask()">
          <i class="fas fa-save me-1"></i>Actualizar Tarea
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para agregar departamento -->
<div class="modal fade" id="addDepartmentModal" tabindex="-1" aria-labelledby="addDepartmentModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addDepartmentModalLabel">Agregar Departamento</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addDepartmentForm">
          <div class="mb-3">
            <label for="departmentName" class="form-label">Nombre del Departamento *</label>
            <input type="text" class="form-control" id="departmentName" required>
          </div>
          <div class="mb-3">
            <label for="departmentCode" class="form-label">Código *</label>
            <input type="text" class="form-control" id="departmentCode" required>
          </div>
          <div class="mb-3">
            <label for="departmentDescription" class="form-label">Descripción</label>
            <textarea class="form-control" id="departmentDescription" rows="3"></textarea>
          </div>
          <div class="mb-3">
            <label for="departmentCountry" class="form-label">País *</label>
            <select class="form-select" id="departmentCountry" required>
              <option value="">Selecciona un país</option>
              <option value="Guatemala">Guatemala</option>
              <option value="Estados Unidos">Estados Unidos</option>
              <option value="Colombia">Colombia</option>
              <option value="Nicaragua">Nicaragua</option>
              <option value="Honduras">Honduras</option>
              <option value="El Salvador">El Salvador</option>
              <option value="Costa Rica">Costa Rica</option>
              <option value="Panamá">Panamá</option>
            </select>
          </div>
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="departmentActive" checked>
              <label class="form-check-label" for="departmentActive">
                Departamento activo
              </label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" onclick="saveDepartment()">Guardar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para editar departamento -->
<div class="modal fade" id="editDepartmentModal" tabindex="-1" aria-labelledby="editDepartmentModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editDepartmentModalLabel">Editar Departamento</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editDepartmentForm">
          <div class="mb-3">
            <label for="editDepartmentName" class="form-label">Nombre del Departamento *</label>
            <input type="text" class="form-control" id="editDepartmentName" required>
          </div>
          <div class="mb-3">
            <label for="editDepartmentCode" class="form-label">Código *</label>
            <input type="text" class="form-control" id="editDepartmentCode" required>
          </div>
          <div class="mb-3">
            <label for="editDepartmentDescription" class="form-label">Descripción</label>
            <textarea class="form-control" id="editDepartmentDescription" rows="3"></textarea>
          </div>
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="editDepartmentActive">
              <label class="form-check-label" for="editDepartmentActive">
                Departamento activo
              </label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" onclick="updateDepartment()">Actualizar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para agregar etiqueta -->
<div class="modal fade" id="addTagModal" tabindex="-1" aria-labelledby="addTagModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addTagModalLabel">Agregar Etiqueta</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addTagForm">
          <div class="mb-3">
            <label for="tagName" class="form-label">Nombre de la Etiqueta *</label>
            <input type="text" class="form-control" id="tagName" required>
          </div>
          <div class="mb-3">
            <label for="tagDisplayName" class="form-label">Nombre para Mostrar *</label>
            <input type="text" class="form-control" id="tagDisplayName" required>
          </div>
          <div class="mb-3">
            <label for="tagDescription" class="form-label">Descripción</label>
            <textarea class="form-control" id="tagDescription" rows="3"></textarea>
          </div>
          <div class="mb-3">
            <label for="tagCategory" class="form-label">Categoría</label>
            <select class="form-select" id="tagCategory" required>
              <option value="">Selecciona una categoría</option>
              <option value="operaciones">Operaciones</option>
              <option value="administracion">Administración</option>
              <option value="rrhh">Recursos Humanos</option>
              <option value="finanzas">Finanzas</option>
              <option value="logistica">Logística</option>
              <option value="tecnologia">Tecnología</option>
              <option value="otro">Otro</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="tagColor" class="form-label">Color</label>
            <input type="color" class="form-control form-control-color" id="tagColor" value="#007bff">
          </div>
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="tagActive" checked>
              <label class="form-check-label" for="tagActive">
                Etiqueta activa
              </label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" onclick="saveTag()">Guardar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para editar etiqueta -->
<div class="modal fade" id="editTagModal" tabindex="-1" aria-labelledby="editTagModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editTagModalLabel">Editar Etiqueta</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editTagForm">
          <div class="mb-3">
            <label for="editTagName" class="form-label">Nombre de la Etiqueta *</label>
            <input type="text" class="form-control" id="editTagName" required>
          </div>
          <div class="mb-3">
            <label for="editTagDisplayName" class="form-label">Nombre para Mostrar *</label>
            <input type="text" class="form-control" id="editTagDisplayName" required>
          </div>
          <div class="mb-3">
            <label for="editTagDescription" class="form-label">Descripción</label>
            <textarea class="form-control" id="editTagDescription" rows="3"></textarea>
          </div>
          <div class="mb-3">
            <label for="editTagCategory" class="form-label">Categoría</label>
            <select class="form-select" id="editTagCategory" required>
              <option value="">Selecciona una categoría</option>
              <option value="operaciones">Operaciones</option>
              <option value="administracion">Administración</option>
              <option value="rrhh">Recursos Humanos</option>
              <option value="finanzas">Finanzas</option>
              <option value="logistica">Logística</option>
              <option value="tecnologia">Tecnología</option>
              <option value="otro">Otro</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="editTagColor" class="form-label">Color</label>
            <input type="color" class="form-control form-control-color" id="editTagColor" value="#007bff">
          </div>
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="editTagActive">
              <label class="form-check-label" for="editTagActive">
                Etiqueta activa
              </label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-primary" onclick="updateTag()">Actualizar</button>
      </div>
    </div>
  </div>
</div>

<script>
// Funciones para manejar periodicidad en modales de tareas
console.log('🔧 Cargando funciones de periodicidad en configuration.ejs...');

        window.updateFrequencyOptions = function(modalType) {
            console.log('🔄 updateFrequencyOptions llamada para modal:', modalType);
            const periodicitySelect = document.getElementById(`${modalType}TaskPeriodicity`);
            const specificDaysRow = document.getElementById(`${modalType}SpecificDaysRow`);
            
            if (!periodicitySelect) {
                console.log('❌ Elementos no encontrados');
                return;
            }
            
            const periodicity = periodicitySelect.value;
            console.log('📅 Periodicidad seleccionada:', periodicity);
            
            // Ocultar días específicos por defecto
            if (specificDaysRow) specificDaysRow.style.display = 'none';
            
            if (periodicity === 'daily') {
                console.log('📅 Tarea diaria - no se muestran días específicos');
                // Para tareas diarias, no mostramos días específicos
                return;
            } else if (periodicity === 'weekly' || periodicity === 'monthly' || periodicity === 'biweekly') {
                console.log('📅 Configurando días específicos para periodicidad:', periodicity);
                // Para otras periodicidades, mostramos días específicos
                window.updateDaysOptions(modalType);
                return;
            }
            
            // Actualizar días específicos
            window.updateDaysOptions(modalType);
        };

window.updateDaysOptions = function(modalType) {
    console.log('📅 updateDaysOptions llamada para modal:', modalType);
    const periodicity = document.getElementById(`${modalType}TaskPeriodicity`).value;
    const specificDaysRow = document.getElementById(`${modalType}SpecificDaysRow`);
    const daysContainer = document.getElementById(`${modalType}DaysSelectionContainer`);
    
    if (!specificDaysRow || !daysContainer) {
        console.log('❌ Elementos de días no encontrados');
        return;
    }
    
    console.log('📊 Periodicidad:', periodicity);
    
    // Limpiar contenedor
    daysContainer.innerHTML = '';
    
    if (periodicity === 'daily') {
        console.log('📅 Ocultando sección de días específicos para tareas diarias');
        specificDaysRow.style.display = 'none';
        
    } else if (periodicity === 'weekly') {
        console.log('📅 Generando checkboxes para días de la semana');
        specificDaysRow.style.display = 'block';
        
        const daysOfWeek = [
            { value: 'monday', label: 'Lunes' },
            { value: 'tuesday', label: 'Martes' },
            { value: 'wednesday', label: 'Miércoles' },
            { value: 'thursday', label: 'Jueves' },
            { value: 'friday', label: 'Viernes' },
            { value: 'saturday', label: 'Sábado' },
            { value: 'sunday', label: 'Domingo' }
        ];
        
        daysOfWeek.forEach(day => {
            const div = document.createElement('div');
            div.className = 'form-check form-check-inline';
            div.innerHTML = `
                <input class="form-check-input" type="checkbox" id="${modalType}_day_${day.value}" value="${day.value}">
                <label class="form-check-label" for="${modalType}_day_${day.value}">${day.label}</label>
            `;
            daysContainer.appendChild(div);
        });
        
    } else if (periodicity === 'monthly') {
        console.log('📅 Generando checkboxes para días del mes');
        specificDaysRow.style.display = 'block';
        
        for (let day = 1; day <= 31; day++) {
            const div = document.createElement('div');
            div.className = 'form-check form-check-inline';
            div.innerHTML = `
                <input class="form-check-input" type="checkbox" id="${modalType}_day_${day}" value="${day}">
                <label class="form-check-label" for="${modalType}_day_${day}">${day}</label>
            `;
            daysContainer.appendChild(div);
        }
        
    } else if (periodicity === 'biweekly') {
        console.log('📅 Generando checkboxes para días quincenales');
        specificDaysRow.style.display = 'block';
        
        for (let day = 1; day <= 15; day++) {
            const div = document.createElement('div');
            div.className = 'form-check form-check-inline';
            div.innerHTML = `
                <input class="form-check-input" type="checkbox" id="${modalType}_day_${day}" value="${day}">
                <label class="form-check-label" for="${modalType}_day_${day}">${day}</label>
            `;
            daysContainer.appendChild(div);
        }
        
    } else {
        console.log('📅 Ocultando sección de días específicos');
        specificDaysRow.style.display = 'none';
    }
};

window.updateTaskMode = function(modalType) {
    const modeSelect = document.getElementById(`${modalType}TaskMode`);
    const targetContainer = document.getElementById(`${modalType}TaskTargetContainer`);
    const periodicitySelect = document.getElementById(`${modalType}TaskPeriodicity`);
    
    if (modeSelect && targetContainer) {
        // Solo mostrar "Veces por día" si es modo contador Y periodicidad diaria
        if (modeSelect.value === 'counter' && periodicitySelect && periodicitySelect.value === 'daily') {
            targetContainer.style.display = 'block';
        } else {
            targetContainer.style.display = 'none';
        }
    }
    
    // Actualizar opciones de periodicidad cuando cambia el modo
    if (periodicitySelect && periodicitySelect.value) {
        window.updateFrequencyOptions(modalType);
    }
};

async function loadSystemUsers() {
    try {
        console.log('🔄 loadSystemUsers - Iniciando carga de usuarios del sistema...');
        
        const response = await fetch('/agendatce/api/config/system-users', {
            credentials: 'include'
        });
        
        console.log('🔄 loadSystemUsers - Response status:', response.status);
        console.log('🔄 loadSystemUsers - Response ok:', response.ok);
        
        if (response.ok) {
            const result = await response.json();
            console.log('🔄 loadSystemUsers - Result:', result);
            
            const systemUsersSelect = document.getElementById('employeeSystemUser');
            
            if (!systemUsersSelect) {
                console.error('❌ loadSystemUsers - No se encontró el elemento employeeSystemUser');
                return;
            }
            
            // Limpiar opciones existentes
            systemUsersSelect.innerHTML = '<option value="">Sin enlace (usuario independiente)</option>';
            
            // Agregar usuarios del sistema
            if (result.success && result.data && result.data.length > 0) {
                console.log('🔄 loadSystemUsers - Agregando', result.data.length, 'usuarios');
                result.data.forEach(user => {
                    const option = document.createElement('option');
                    option.value = user._id;
                    option.textContent = `${user.name} (${user.correo})`;
                    systemUsersSelect.appendChild(option);
                });
            } else {
                console.log('⚠️ loadSystemUsers - No hay usuarios disponibles o error en la respuesta');
                const option = document.createElement('option');
                option.value = '';
                option.textContent = 'No hay usuarios disponibles';
                systemUsersSelect.appendChild(option);
            }
            
            // Los usuarios se cargan en el modal de búsqueda
        } else {
            console.error('❌ loadSystemUsers - Error en la respuesta:', response.status, response.statusText);
            const systemUsersSelect = document.getElementById('employeeSystemUser');
            if (systemUsersSelect) {
                systemUsersSelect.innerHTML = '<option value="">Error cargando usuarios</option>';
            }
        }
    } catch (error) {
        console.error('❌ loadSystemUsers - Error:', error);
        const systemUsersSelect = document.getElementById('employeeSystemUser');
        if (systemUsersSelect) {
            systemUsersSelect.innerHTML = '<option value="">Error cargando usuarios</option>';
        }
    }
}

// En la función que abre el modal de agregar empleado
async function showAddEmployeeModal() {
    await loadSystemUsers(); // ✅ AGREGAR ESTA LÍNEA
    const modal = new bootstrap.Modal(document.getElementById('addEmployeeModal'));
    modal.show();
}

// NUEVAS FUNCIONES PARA ASIGNACIÓN POR DEPARTAMENTOS
window.selectAssignmentType = function(type) {
    console.log('🎯 Tipo de asignación seleccionado:', type);
    
    // Actualizar campo hidden
    document.getElementById('addTaskAssignmentType').value = type;
    
    // Actualizar estilos de las tarjetas
    const userCard = document.getElementById('userAssignmentCard');
    const deptCard = document.getElementById('departmentAssignmentCard');
    
    // Remover clases activas
    userCard.classList.remove('border-primary', 'bg-light');
    deptCard.classList.remove('border-success', 'bg-light');
    
    // Ocultar ambos contenedores
    document.getElementById('userAssignmentContainer').style.display = 'none';
    document.getElementById('departmentAssignmentContainer').style.display = 'none';
    
    if (type === 'user') {
        // Activar tarjeta de usuarios
        userCard.classList.add('border-primary', 'bg-light');
        document.getElementById('userAssignmentContainer').style.display = 'block';
        
        // Cargar usuarios si no están cargados
        loadUsersForAssignment();
        
    } else if (type === 'department') {
        // Activar tarjeta de departamento
        deptCard.classList.add('border-success', 'bg-light');
        document.getElementById('departmentAssignmentContainer').style.display = 'block';
        
        // Cargar departamentos si no están cargados
        loadDepartmentsForAssignment();
    }
};

// Variable global para almacenar todos los usuarios
let allUsersForAssignment = [];

window.loadUsersForAssignment = async function() {
    try {
        console.log('👥 Cargando usuarios para asignación...');
        const response = await fetch('/agendatce/api/configuration/employees');
        
        if (response.ok) {
            const result = await response.json();
            
            if (result.success && result.data && result.data.length > 0) {
                // Guardar usuarios en variable global para filtrado
                allUsersForAssignment = result.data;
                
                // Renderizar todos los usuarios inicialmente
                renderUsersList(allUsersForAssignment);
                
                // Limpiar buscador
                document.getElementById('userSearchInput').value = '';
                updateSelectedUsersCount();
                
            } else {
                document.getElementById('addTaskUsers').innerHTML = '<div class="text-center text-muted py-3">No hay usuarios disponibles</div>';
            }
        }
    } catch (error) {
        console.error('❌ Error cargando usuarios:', error);
        document.getElementById('addTaskUsers').innerHTML = '<div class="text-center text-danger py-3">Error cargando usuarios</div>';
    }
};

// Función para renderizar la lista de usuarios
window.renderUsersList = function(users) {
    const usersContainer = document.getElementById('addTaskUsers');
    usersContainer.innerHTML = '';
    
    if (users.length === 0) {
        usersContainer.innerHTML = '<div class="text-center text-muted py-3">No se encontraron usuarios</div>';
        return;
    }
    
    users.forEach(user => {
        const div = document.createElement('div');
        div.className = 'form-check mb-2 user-item';
        
        div.innerHTML = `
            <input class="form-check-input" type="checkbox" id="user_${user._id}" value="${user._id}" onchange="updateSelectedUsersCount()">
            <label class="form-check-label" for="user_${user._id}">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <strong>${user.name || user.nombre}</strong>
                        <br><small class="text-muted">
                            <i class="fas fa-briefcase me-1"></i>${user.cargo || 'Sin cargo'}
                            <i class="fas fa-building ms-2 me-1"></i>${user.departamento_name || 'Sin departamento'}
                        </small>
                    </div>
                    <div class="flex-shrink-0">
                        <span class="badge bg-secondary">${user.role_name || 'Empleado'}</span>
                    </div>
                </div>
            </label>
        `;
        usersContainer.appendChild(div);
    });
};

// Función para filtrar usuarios
window.filterUsers = function() {
    const searchTerm = document.getElementById('userSearchInput').value.toLowerCase();
    
    if (!searchTerm) {
        // Si no hay término de búsqueda, mostrar todos
        renderUsersList(allUsersForAssignment);
        return;
    }
    
    // Filtrar usuarios por nombre, cargo o departamento
    const filteredUsers = allUsersForAssignment.filter(user => {
        const name = (user.name || user.nombre || '').toLowerCase();
        const cargo = (user.cargo || '').toLowerCase();
        const dept = (user.departamento_name || '').toLowerCase();
        
        return name.includes(searchTerm) || 
               cargo.includes(searchTerm) || 
               dept.includes(searchTerm);
    });
    
    renderUsersList(filteredUsers);
    console.log(`🔍 Filtro aplicado: "${searchTerm}" - ${filteredUsers.length} usuarios encontrados`);
};

// Función para limpiar búsqueda
window.clearUserSearch = function() {
    document.getElementById('userSearchInput').value = '';
    renderUsersList(allUsersForAssignment);
    console.log('🧹 Búsqueda limpiada - mostrando todos los usuarios');
};

// Función para seleccionar todos los usuarios visibles
window.selectAllUsers = function() {
    const checkboxes = document.querySelectorAll('#addTaskUsers input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.checked = true;
    });
    updateSelectedUsersCount();
    console.log('✅ Todos los usuarios visibles seleccionados');
};

// Función para deseleccionar todos los usuarios
window.clearAllUsers = function() {
    const checkboxes = document.querySelectorAll('#addTaskUsers input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
    updateSelectedUsersCount();
    console.log('❌ Todos los usuarios deseleccionados');
};

// Función para actualizar contador de usuarios seleccionados
window.updateSelectedUsersCount = function() {
    const checkedBoxes = document.querySelectorAll('#addTaskUsers input[type="checkbox"]:checked');
    const count = checkedBoxes.length;
    document.getElementById('selectedUsersCount').textContent = count;
    
    // Cambiar color del contador según la cantidad
    const countElement = document.getElementById('selectedUsersCount');
    if (count === 0) {
        countElement.className = 'text-muted';
    } else if (count <= 3) {
        countElement.className = 'text-primary fw-bold';
    } else {
        countElement.className = 'text-success fw-bold';
    }
};

window.loadDepartmentsForAssignment = async function() {
    try {
        console.log('🏢 Cargando departamentos para asignación...');
        const response = await fetch('/agendatce/api/configuration/departments');
        
        if (response.ok) {
            const result = await response.json();
            const deptSelect = document.getElementById('addTaskDepartmentSelect');
            
            if (result.success && result.data && result.data.length > 0) {
                deptSelect.innerHTML = '<option value="">Seleccionar departamento...</option>';
                
                result.data.forEach(dept => {
                    const option = document.createElement('option');
                    option.value = dept._id;
                    option.textContent = `${dept.name} (${dept.code || 'Sin código'})`;
                    deptSelect.appendChild(option);
                });
            } else {
                deptSelect.innerHTML = '<option value="">No hay departamentos disponibles</option>';
            }
        }
    } catch (error) {
        console.error('❌ Error cargando departamentos:', error);
        document.getElementById('addTaskDepartmentSelect').innerHTML = '<option value="">Error cargando departamentos</option>';
    }
};

// FUNCIONES PARA MODAL DE EDICIÓN
window.selectEditAssignmentType = function(type) {
    console.log('🎯 Tipo de asignación para edición seleccionado:', type);
    
    // Actualizar campo hidden
    document.getElementById('editTaskAssignmentType').value = type;
    
    // Actualizar estilos de las tarjetas
    const userCard = document.getElementById('editUserAssignmentCard');
    const deptCard = document.getElementById('editDepartmentAssignmentCard');
    
    // Remover clases activas
    userCard.classList.remove('border-primary', 'bg-light');
    deptCard.classList.remove('border-success', 'bg-light');
    
    // Ocultar ambos contenedores
    document.getElementById('editUserAssignmentContainer').style.display = 'none';
    document.getElementById('editDepartmentAssignmentContainer').style.display = 'none';
    
    if (type === 'user') {
        // Activar tarjeta de usuarios
        userCard.classList.add('border-primary', 'bg-light');
        document.getElementById('editUserAssignmentContainer').style.display = 'block';
        
        // Cargar usuarios si no están cargados
        loadUsersForEditAssignment();
        
    } else if (type === 'department') {
        // Activar tarjeta de departamento
        deptCard.classList.add('border-success', 'bg-light');
        document.getElementById('editDepartmentAssignmentContainer').style.display = 'block';
        
        // Cargar departamentos si no están cargados
        loadDepartmentsForEditAssignment();
    }
};

// Variable global para almacenar todos los usuarios para edición
let allUsersForEditAssignment = [];

window.loadUsersForEditAssignment = async function() {
    try {
        console.log('👥 Cargando usuarios para edición...');
        const response = await fetch('/agendatce/api/configuration/employees');
        
        if (response.ok) {
            const result = await response.json();
            
            if (result.success && result.data && result.data.length > 0) {
                // Guardar usuarios en variable global para filtrado
                allUsersForEditAssignment = result.data;
                
                // Renderizar todos los usuarios inicialmente
                renderEditUsersList(allUsersForEditAssignment);
                
                // Limpiar buscador
                document.getElementById('editUserSearchInput').value = '';
                updateEditSelectedUsersCount();
                
            } else {
                document.getElementById('editTaskUsers').innerHTML = '<div class="text-center text-muted py-3">No hay usuarios disponibles</div>';
            }
        }
    } catch (error) {
        console.error('❌ Error cargando usuarios para edición:', error);
        document.getElementById('editTaskUsers').innerHTML = '<div class="text-center text-danger py-3">Error cargando usuarios</div>';
    }
};

// Función para renderizar la lista de usuarios en edición
window.renderEditUsersList = function(users) {
    const usersContainer = document.getElementById('editTaskUsers');
    usersContainer.innerHTML = '';
    
    if (users.length === 0) {
        usersContainer.innerHTML = '<div class="text-center text-muted py-3">No se encontraron usuarios</div>';
        return;
    }
    
    users.forEach(user => {
        const div = document.createElement('div');
        div.className = 'form-check mb-2 user-item';
        
        div.innerHTML = `
            <input class="form-check-input" type="checkbox" id="edit_user_${user._id}" value="${user._id}" onchange="updateEditSelectedUsersCount()">
            <label class="form-check-label" for="edit_user_${user._id}">
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <strong>${user.name || user.nombre}</strong>
                        <br><small class="text-muted">
                            <i class="fas fa-briefcase me-1"></i>${user.cargo || 'Sin cargo'}
                            <i class="fas fa-building ms-2 me-1"></i>${user.departamento_name || 'Sin departamento'}
                        </small>
                    </div>
                    <div class="flex-shrink-0">
                        <span class="badge bg-secondary">${user.role_name || 'Empleado'}</span>
                    </div>
                </div>
            </label>
        `;
        usersContainer.appendChild(div);
    });
};

// Función para filtrar usuarios en edición
window.filterEditUsers = function() {
    const searchTerm = document.getElementById('editUserSearchInput').value.toLowerCase();
    
    if (!searchTerm) {
        // Si no hay término de búsqueda, mostrar todos
        renderEditUsersList(allUsersForEditAssignment);
        return;
    }
    
    // Filtrar usuarios por nombre, cargo o departamento
    const filteredUsers = allUsersForEditAssignment.filter(user => {
        const name = (user.name || user.nombre || '').toLowerCase();
        const cargo = (user.cargo || '').toLowerCase();
        const dept = (user.departamento_name || '').toLowerCase();
        
        return name.includes(searchTerm) || 
               cargo.includes(searchTerm) || 
               dept.includes(searchTerm);
    });
    
    renderEditUsersList(filteredUsers);
    console.log(`🔍 Filtro de edición aplicado: "${searchTerm}" - ${filteredUsers.length} usuarios encontrados`);
};

// Función para limpiar búsqueda en edición
window.clearEditUserSearch = function() {
    document.getElementById('editUserSearchInput').value = '';
    renderEditUsersList(allUsersForEditAssignment);
    console.log('🧹 Búsqueda de edición limpiada - mostrando todos los usuarios');
};

// Función para seleccionar todos los usuarios visibles en edición
window.selectAllEditUsers = function() {
    const checkboxes = document.querySelectorAll('#editTaskUsers input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.checked = true;
    });
    updateEditSelectedUsersCount();
    console.log('✅ Todos los usuarios visibles seleccionados en edición');
};

// Función para deseleccionar todos los usuarios en edición
window.clearAllEditUsers = function() {
    const checkboxes = document.querySelectorAll('#editTaskUsers input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.checked = false;
    });
    updateEditSelectedUsersCount();
    console.log('❌ Todos los usuarios deseleccionados en edición');
};

// Función para actualizar contador de usuarios seleccionados en edición
window.updateEditSelectedUsersCount = function() {
    const checkedBoxes = document.querySelectorAll('#editTaskUsers input[type="checkbox"]:checked');
    const count = checkedBoxes.length;
    document.getElementById('editSelectedUsersCount').textContent = count;
    
    // Cambiar color del contador según la cantidad
    const countElement = document.getElementById('editSelectedUsersCount');
    if (count === 0) {
        countElement.className = 'text-muted';
    } else if (count <= 3) {
        countElement.className = 'text-primary fw-bold';
    } else {
        countElement.className = 'text-success fw-bold';
    }
};

window.loadDepartmentsForEditAssignment = async function() {
    try {
        console.log('🏢 Cargando departamentos para edición...');
        const response = await fetch('/agendatce/api/configuration/departments');
        
        if (response.ok) {
            const result = await response.json();
            const deptSelect = document.getElementById('editTaskDepartmentSelect');
            
            if (result.success && result.data && result.data.length > 0) {
                deptSelect.innerHTML = '<option value="">Seleccionar departamento...</option>';
                
                result.data.forEach(dept => {
                    const option = document.createElement('option');
                    option.value = dept._id;
                    option.textContent = `${dept.name} (${dept.code || 'Sin código'})`;
                    deptSelect.appendChild(option);
                });
            } else {
                deptSelect.innerHTML = '<option value="">No hay departamentos disponibles</option>';
            }
        }
    } catch (error) {
        console.error('❌ Error cargando departamentos para edición:', error);
        document.getElementById('editTaskDepartmentSelect').innerHTML = '<option value="">Error cargando departamentos</option>';
    }
};

// Función para alternar el requerimiento de evidencia
window.toggleEvidenceRequirement = function(modalType) {
    const evidenceBtn = document.getElementById(`${modalType}TaskEvidenceBtn`);
    const noEvidenceBtn = document.getElementById(`${modalType}TaskNoEvidenceBtn`);
    const evidenceInput = document.getElementById(`${modalType}TaskEvidence`);
    
    // Cambiar estado
    const currentState = evidenceInput.value === 'true';
    const newState = !currentState;
    
    // Actualizar input hidden
    evidenceInput.value = newState.toString();
    
    // Actualizar botones
    if (newState) {
        evidenceBtn.className = 'btn btn-success';
        noEvidenceBtn.className = 'btn btn-outline-secondary';
    } else {
        evidenceBtn.className = 'btn btn-outline-success';
        noEvidenceBtn.className = 'btn btn-secondary';
    }
    
    console.log(`📸 Evidencia ${newState ? 'requerida' : 'no requerida'} para modal ${modalType}`);
};


// ===== FUNCIONES PARA TAREAS TEMPORALES =====

// Mostrar modal de tarea temporal
window.showAddTemporaryTaskModal = function() {
    console.log('⏰ Mostrando modal para tarea temporal');
    
    // Establecer fecha de hoy por defecto
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('tempTaskSingleDate').value = today;
    
    // Limpiar formulario
    document.getElementById('tempTaskTitle').value = '';
    document.getElementById('tempTaskDescription').value = '';
    document.getElementById('tempTaskPriority').value = 'normal';
    document.getElementById('tempTaskType').value = 'single';
    document.getElementById('tempTaskAssignmentType').value = 'user';
    document.getElementById('tempTaskEvidence').value = 'false';
    
    // Resetear botones de evidencia
    document.getElementById('tempTaskEvidenceBtn').className = 'btn btn-outline-success';
    document.getElementById('tempTaskNoEvidenceBtn').className = 'btn btn-secondary';
    
    // Mostrar modal primero
    const modal = new bootstrap.Modal(document.getElementById('addTemporaryTaskModal'));
    modal.show();
    
    // Después de mostrar el modal, configurar los elementos
    setTimeout(() => {
        // Mostrar/ocultar contenedores según tipo
        updateTemporaryTaskType();
        updateTemporaryAssignmentType();
        
        // Cargar datos necesarios
        loadTemporaryTaskData();
        
        // Cargar etiquetas
        loadTemporaryTaskTags();
    }, 300);
};

// Actualizar tipo de tarea temporal
window.updateTemporaryTaskType = function() {
    const taskType = document.getElementById('tempTaskType').value;
    const singleContainer = document.getElementById('tempSingleDateContainer');
    const rangeContainer = document.getElementById('tempDateRangeContainer');
    const specificContainer = document.getElementById('tempSpecificDaysContainer');
    
    // Ocultar todos
    singleContainer.style.display = 'none';
    rangeContainer.style.display = 'none';
    specificContainer.style.display = 'none';
    
    // Mostrar el correspondiente
    if (taskType === 'single') {
        singleContainer.style.display = 'block';
    } else if (taskType === 'range') {
        rangeContainer.style.display = 'block';
    } else if (taskType === 'recurring') {
        specificContainer.style.display = 'block';
        // Generar días del mes
        generateTemporaryTaskDays();
    }
    
    // Actualizar vista previa solo si los elementos están disponibles
    setTimeout(() => {
        updateTemporaryTaskPreview();
    }, 100);
};

// Actualizar tipo de asignación temporal
window.updateTemporaryAssignmentType = function() {
    const assignmentType = document.getElementById('tempTaskAssignmentType').value;
    const userContainer = document.getElementById('tempUserContainer');
    const deptContainer = document.getElementById('tempDeptContainer');
    
    // Ocultar todos
    userContainer.style.display = 'none';
    deptContainer.style.display = 'none';
    
    // Mostrar el correspondiente
    if (assignmentType === 'user') {
        userContainer.style.display = 'block';
    } else if (assignmentType === 'department') {
        deptContainer.style.display = 'block';
    }
    
    // Actualizar vista previa solo si los elementos están disponibles
    setTimeout(() => {
        updateTemporaryTaskPreview();
    }, 100);
};

// Alternar requerimiento de evidencia temporal
window.toggleTemporaryEvidenceRequirement = function() {
    const evidenceBtn = document.getElementById('tempTaskEvidenceBtn');
    const noEvidenceBtn = document.getElementById('tempTaskNoEvidenceBtn');
    const evidenceInput = document.getElementById('tempTaskEvidence');
    
    const currentState = evidenceInput.value === 'true';
    const newState = !currentState;
    
    evidenceInput.value = newState.toString();
    
    if (newState) {
        evidenceBtn.className = 'btn btn-success';
        noEvidenceBtn.className = 'btn btn-outline-secondary';
    } else {
        evidenceBtn.className = 'btn btn-outline-success';
        noEvidenceBtn.className = 'btn btn-secondary';
    }
    
    // Actualizar vista previa solo si los elementos están disponibles
    setTimeout(() => {
        updateTemporaryTaskPreview();
    }, 100);
};

// Cargar datos para tareas temporales
window.loadTemporaryTaskData = async function() {
    try {
        console.log('📊 Cargando datos para tarea temporal...');
        console.log('📊 window.allEmployees:', window.allEmployees?.length || 'undefined');
        console.log('📊 window.allDepartments:', window.allDepartments?.length || 'undefined');
        
        // Cargar usuarios si no están disponibles o están vacíos
        if (!window.allEmployees || window.allEmployees.length === 0) {
            console.log('📥 Cargando empleados desde API...');
            const response = await fetch('/agendatce/api/configuration/employees');
            const data = await response.json();
            if (data.success) {
                window.allEmployees = data.data;
                console.log('✅ Empleados cargados:', window.allEmployees.length);
            }
        }
        
        // Cargar departamentos si no están disponibles o están vacíos
        if (!window.allDepartments || window.allDepartments.length === 0) {
            console.log('📥 Cargando departamentos desde API...');
            const response = await fetch('/agendatce/api/configuration/departments');
            const data = await response.json();
            if (data.success) {
                window.allDepartments = data.data;
                console.log('✅ Departamentos cargados:', window.allDepartments.length);
            }
        }
        
        // Llenar select de usuarios
        const userSelect = document.getElementById('tempTaskUser');
        if (userSelect) {
            userSelect.innerHTML = '<option value="">Seleccionar usuario...</option>';
            if (window.allEmployees && window.allEmployees.length > 0) {
                window.allEmployees.forEach(emp => {
                    const option = document.createElement('option');
                    option.value = emp._id;
                    option.textContent = emp.name;
                    userSelect.appendChild(option);
                });
                console.log('✅ Select de usuarios llenado:', window.allEmployees.length, 'opciones');
            } else {
                console.log('⚠️ No hay empleados para llenar el select');
            }
        }
        
        // Llenar select de departamentos
        const deptSelect = document.getElementById('tempTaskDepartment');
        if (deptSelect) {
            deptSelect.innerHTML = '<option value="">Seleccionar departamento...</option>';
            if (window.allDepartments && window.allDepartments.length > 0) {
                window.allDepartments.forEach(dept => {
                    const option = document.createElement('option');
                    option.value = dept._id;
                    option.textContent = `${dept.name} (${dept.code || 'Sin código'})`;
                    deptSelect.appendChild(option);
                });
                console.log('✅ Select de departamentos llenado:', window.allDepartments.length, 'opciones');
            } else {
                console.log('⚠️ No hay departamentos para llenar el select');
            }
        }
        
    } catch (error) {
        console.error('❌ Error cargando datos para tarea temporal:', error);
    }
};

// Actualizar vista previa de tarea temporal
window.updateTemporaryTaskPreview = function() {
    const titleElement = document.getElementById('tempTaskTitle');
    const descriptionElement = document.getElementById('tempTaskDescription');
    const priorityElement = document.getElementById('tempTaskPriority');
    const taskTypeElement = document.getElementById('tempTaskType');
    const assignmentTypeElement = document.getElementById('tempTaskAssignmentType');
    const evidenceElement = document.getElementById('tempTaskEvidence');
    
    // Verificar que los elementos existan antes de acceder a sus valores
    if (!titleElement || !descriptionElement || !priorityElement || !taskTypeElement || !assignmentTypeElement || !evidenceElement) {
        console.log('⚠️ Algunos elementos del modal temporal no están disponibles aún');
        return;
    }
    
    const title = titleElement.value;
    const description = descriptionElement.value;
    const priority = priorityElement.value;
    const taskType = taskTypeElement.value;
    const assignmentType = assignmentTypeElement.value;
    const requiresEvidence = evidenceElement.value === 'true';
    
    if (!title) {
        document.getElementById('tempTaskPreview').innerHTML = '<p class="text-muted">Completa los campos para ver la vista previa...</p>';
        return;
    }
    
    let previewHTML = `
        <div class="temp-preview-card active">
            <div class="d-flex justify-content-between align-items-start mb-2">
                <h6 class="mb-0">${title}</h6>
                <span class="badge bg-${priority === 'urgent' ? 'danger' : priority === 'high' ? 'warning' : 'success'}">${priority.toUpperCase()}</span>
            </div>
    `;
    
    if (description) {
        previewHTML += `<p class="text-muted small mb-2">${description}</p>`;
    }
    
    // Información de tiempo
    if (taskType === 'single') {
        const date = document.getElementById('tempTaskSingleDate').value;
        const time = document.getElementById('tempTaskTime').value;
        previewHTML += `<p class="small mb-1"><i class="fas fa-calendar me-1"></i>Fecha: ${date || 'No seleccionada'}`;
        if (time) previewHTML += ` a las ${time}`;
        previewHTML += `</p>`;
    } else if (taskType === 'range') {
        const startDate = document.getElementById('tempTaskStartDate').value;
        const endDate = document.getElementById('tempTaskEndDate').value;
        previewHTML += `<p class="small mb-1"><i class="fas fa-calendar-range me-1"></i>Del ${startDate || 'No seleccionada'} al ${endDate || 'No seleccionada'}</p>`;
    }
    
    // Información de asignación
    if (assignmentType === 'user') {
        const userId = document.getElementById('tempTaskUser').value;
        const user = window.allEmployees ? window.allEmployees.find(e => e._id === userId) : null;
        previewHTML += `<p class="small mb-1"><i class="fas fa-user me-1"></i>Asignada a: ${user ? user.name : 'Usuario no seleccionado'}</p>`;
    } else if (assignmentType === 'department') {
        const deptId = document.getElementById('tempTaskDepartment').value;
        const dept = window.allDepartments ? window.allDepartments.find(d => d._id === deptId) : null;
        previewHTML += `<p class="small mb-1"><i class="fas fa-building me-1"></i>Asignada a: ${dept ? dept.name : 'Departamento no seleccionado'}</p>`;
    }
    
    // Características especiales
    previewHTML += `<div class="d-flex flex-wrap gap-1 mt-2">`;
    if (requiresEvidence) {
        previewHTML += `<span class="badge bg-info"><i class="fas fa-camera me-1"></i>Requiere evidencia</span>`;
    }
    previewHTML += `</div>`;
    
    previewHTML += `</div>`;
    
    document.getElementById('tempTaskPreview').innerHTML = previewHTML;
};

// Guardar tarea temporal
window.saveTemporaryTask = async function() {
    try {
        console.log('💾 Guardando tarea temporal');
        
        // Validar campos requeridos
        const title = document.getElementById('tempTaskTitle').value;
        if (!title) {
            showAlert('El título es requerido', 'warning');
            return;
        }
        
        const taskType = document.getElementById('tempTaskType').value;
        const assignmentType = document.getElementById('tempTaskAssignmentType').value;
        
        // Validar fechas según el tipo
        if (taskType === 'single') {
            const date = document.getElementById('tempTaskSingleDate').value;
            if (!date) {
                showAlert('La fecha es requerida', 'warning');
                return;
            }
        } else if (taskType === 'range') {
            const startDate = document.getElementById('tempTaskStartDate').value;
            const endDate = document.getElementById('tempTaskEndDate').value;
            if (!startDate || !endDate) {
                showAlert('Las fechas de inicio y fin son requeridas', 'warning');
                return;
            }
        }
        
        // Validar asignación
        if (assignmentType === 'user') {
            const userId = document.getElementById('tempTaskUser').value;
            if (!userId) {
                showAlert('Debes seleccionar un usuario', 'warning');
                return;
            }
        } else if (assignmentType === 'department') {
            const deptId = document.getElementById('tempTaskDepartment').value;
            if (!deptId) {
                showAlert('Debes seleccionar un departamento', 'warning');
                return;
            }
        }
        
        // Obtener etiquetas seleccionadas
        const selectedTags = getSelectedTemporaryTags();
        
        // Preparar datos de la tarea temporal
        const taskData = {
            title: title,
            description: document.getElementById('tempTaskDescription').value,
            priority: document.getElementById('tempTaskPriority').value,
            requires_evidence: document.getElementById('tempTaskEvidence').value === 'true',
            task_type: 'temporary',
            temporary_config: {
                type: taskType,
                single_date: taskType === 'single' ? document.getElementById('tempTaskSingleDate').value : null,
                start_date: taskType === 'range' ? document.getElementById('tempTaskStartDate').value : null,
                end_date: taskType === 'range' ? document.getElementById('tempTaskEndDate').value : null,
                specific_days: taskType === 'recurring' ? getSelectedTemporaryDays() : [],
                time_limit: document.getElementById('tempTaskTime').value || null
            },
            assignment_type: assignmentType,
            assigned_users: assignmentType === 'user' ? [document.getElementById('tempTaskUser').value] : [],
            assigned_department: assignmentType === 'department' ? document.getElementById('tempTaskDepartment').value : null,
            mode: 'binary',
            periodicity: 'daily',
            target_per_period: 1,
            tags: selectedTags
        };
        
        console.log('📝 Datos de tarea temporal:', taskData);
        
        // Enviar al servidor
        const response = await fetch('/agendatce/api/configuration/tasks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify(taskData)
        });
        
        const result = await response.json();
        
        if (result.success) {
            showAlert('✅ Tarea temporal creada exitosamente', 'success');
            
            // Cerrar modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addTemporaryTaskModal'));
            modal.hide();
            
            // Recargar lista de tareas
            if (typeof loadTasks === 'function') {
                await loadTasks();
            }
        } else {
            showAlert(`❌ Error: ${result.message}`, 'danger');
        }
        
    } catch (error) {
        console.error('❌ Error guardando tarea temporal:', error);
        showAlert('❌ Error al crear la tarea temporal', 'danger');
    }
};

// Generar días del mes para tareas temporales
window.generateTemporaryTaskDays = function() {
    const container = document.getElementById('tempDaysSelectionContainer');
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    let html = '<div class="row">';
    for (let day = 1; day <= daysInMonth; day++) {
        const dayOfWeek = new Date(year, month, day).getDay();
        const dayNames = ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];
        
        html += `
            <div class="col-2 col-md-1 mb-2">
                <button type="button" class="btn btn-outline-primary btn-sm day-btn w-100" 
                        data-day="${day}" 
                        title="${dayNames[dayOfWeek]} ${day}">
                    ${day}
                </button>
            </div>
        `;
    }
    html += '</div>';
    
    container.innerHTML = html;
    
    // Agregar event listeners
    container.querySelectorAll('.day-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            this.classList.toggle('active');
            // Actualizar vista previa solo si los elementos están disponibles
            setTimeout(() => {
                updateTemporaryTaskPreview();
            }, 100);
        });
    });
};

// Cargar etiquetas para tareas temporales
window.loadTemporaryTaskTags = async function() {
    try {
        if (allTags.length === 0) {
            const response = await fetch('/agendatce/api/configuration/tags');
            const data = await response.json();
            if (data.success) {
                allTags = data.data;
            }
        }
        
        const container = document.getElementById('tempTaskTags');
        container.innerHTML = '';
        
        allTags.forEach(tag => {
            const tagElement = document.createElement('div');
            tagElement.className = 'form-check form-check-inline';
            tagElement.innerHTML = `
                <input class="form-check-input" type="checkbox" id="tempTag_${tag._id}" value="${tag._id}">
                <label class="form-check-label" for="tempTag_${tag._id}">
                    <span class="badge" style="background-color: ${tag.color || '#6c757d'}">${tag.name}</span>
                </label>
            `;
            container.appendChild(tagElement);
        });
        
        // Agregar event listeners
        container.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                // Actualizar vista previa solo si los elementos están disponibles
                setTimeout(() => {
                    updateTemporaryTaskPreview();
                }, 100);
            });
        });
        
    } catch (error) {
        console.error('❌ Error cargando etiquetas para tarea temporal:', error);
        document.getElementById('tempTaskTags').innerHTML = '<div class="text-center text-muted">Error cargando etiquetas</div>';
    }
};

// Obtener días seleccionados para tareas temporales
function getSelectedTemporaryDays() {
    const selectedDays = [];
    document.querySelectorAll('#tempDaysSelectionContainer .day-btn.active').forEach(btn => {
        selectedDays.push(parseInt(btn.dataset.day));
    });
    return selectedDays;
}

// Obtener etiquetas seleccionadas para tareas temporales
function getSelectedTemporaryTags() {
    const selectedTags = [];
    document.querySelectorAll('#tempTaskTags input[type="checkbox"]:checked').forEach(checkbox => {
        selectedTags.push(checkbox.value);
    });
    return selectedTags;
}

console.log('✅ Funciones de periodicidad y asignación cargadas en configuration.ejs:', {
    updateFrequencyOptions: typeof window.updateFrequencyOptions,
    updateDaysOptions: typeof window.updateDaysOptions,
    updateTaskMode: typeof window.updateTaskMode,
    selectAssignmentType: typeof window.selectAssignmentType,
    loadUsersForAssignment: typeof window.loadUsersForAssignment,
    loadDepartmentsForAssignment: typeof window.loadDepartmentsForAssignment,
    filterUsers: typeof window.filterUsers,
    clearUserSearch: typeof window.clearUserSearch,
    selectAllUsers: typeof window.selectAllUsers,
    clearAllUsers: typeof window.clearAllUsers,
    updateSelectedUsersCount: typeof window.updateSelectedUsersCount,
    showAddTemporaryTaskModal: typeof window.showAddTemporaryTaskModal,
    updateTemporaryTaskType: typeof window.updateTemporaryTaskType,
    updateTemporaryAssignmentType: typeof window.updateTemporaryAssignmentType,
    toggleTemporaryEvidenceRequirement: typeof window.toggleTemporaryEvidenceRequirement,
    saveTemporaryTask: typeof window.saveTemporaryTask
});

// Inicialización del sistema de búsqueda de usuarios
document.addEventListener('DOMContentLoaded', function() {
    console.log('✅ Sistema de búsqueda de usuarios inicializado');
    
    // Inicializar botones de días para tareas temporales
    document.querySelectorAll('.day-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            this.classList.toggle('active');
            updateTemporaryTaskPreview();
        });
    });
    
    // Agregar event listeners para actualizar vista previa
    const inputs = ['tempTaskTitle', 'tempTaskDescription', 'tempTaskPriority', 'tempTaskType', 'tempTaskAssignmentType'];
    inputs.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.addEventListener('input', () => {
                setTimeout(() => {
                    updateTemporaryTaskPreview();
                }, 100);
            });
            element.addEventListener('change', () => {
                setTimeout(() => {
                    updateTemporaryTaskPreview();
                }, 100);
            });
        }
    });
});
</script>


