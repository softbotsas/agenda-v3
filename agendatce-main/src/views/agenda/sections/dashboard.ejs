<!-- Dashboard Styles -->
<style>
/* Glassmorphism Dashboard - Estilo 1 */
.dashboard-container {
  padding: 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
  position: relative;
  overflow: hidden;
}

.dashboard-container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
  opacity: 0.3;
  pointer-events: none;
}

/* Glass Header */
.glass-header {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 20px;
  padding: 30px;
  margin-bottom: 30px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
}

.glass-header::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  transform: rotate(45deg);
  animation: shimmer 3s infinite;
}

@keyframes shimmer {
  0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
  100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  z-index: 1;
}

.user-section {
  display: flex;
  align-items: center;
  gap: 20px;
}

.user-avatar-glass {
  position: relative;
  width: 80px;
  height: 80px;
}

.avatar-ring {
  position: absolute;
  top: -5px;
  left: -5px;
  right: -5px;
  bottom: -5px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  animation: rotate 3s linear infinite;
}

@keyframes rotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

.avatar-inner {
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  color: white;
  backdrop-filter: blur(10px);
}

.user-info h2 {
  color: white;
  margin: 0;
  font-size: 28px;
  font-weight: 600;
}

.user-info p {
  color: rgba(255, 255, 255, 0.8);
  margin: 0;
  font-size: 16px;
}

.header-stats {
  display: flex;
  gap: 30px;
}

.stat-item {
  text-align: center;
}

.stat-number {
  display: block;
  font-size: 32px;
  font-weight: 700;
  color: white;
  line-height: 1;
}

.stat-label {
  font-size: 14px;
  color: rgba(255, 255, 255, 0.8);
  text-transform: uppercase;
  letter-spacing: 1px;
}

/* Stats Grid */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.glass-card {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 20px;
  padding: 25px;
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
  cursor: pointer;
}

.glass-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
}

.glass-card.primary {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(118, 75, 162, 0.2));
}

.glass-card.success {
  background: linear-gradient(135deg, rgba(17, 153, 142, 0.2), rgba(56, 239, 125, 0.2));
}

.glass-card.warning {
  background: linear-gradient(135deg, rgba(240, 147, 251, 0.2), rgba(245, 87, 108, 0.2));
}

.glass-card.danger {
  background: linear-gradient(135deg, rgba(255, 154, 158, 0.2), rgba(254, 207, 239, 0.2));
}

.card-icon {
  position: absolute;
  top: 20px;
  right: 20px;
  width: 50px;
  height: 50px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  color: white;
}

.card-content h3 {
  font-size: 36px;
  font-weight: 700;
  color: white;
  margin: 0 0 10px 0;
}

.card-content p {
  color: rgba(255, 255, 255, 0.8);
  margin: 0 0 20px 0;
  font-size: 16px;
}

/* Progress Ring */
.progress-ring {
  position: absolute;
  bottom: 20px;
  right: 20px;
}

.progress-circle {
  transform: rotate(-90deg);
}

.progress-bg {
  fill: none;
  stroke: rgba(255, 255, 255, 0.2);
  stroke-width: 3;
}

.progress-fill {
  fill: none;
  stroke: white;
  stroke-width: 3;
  stroke-linecap: round;
  stroke-dasharray: 157;
  stroke-dashoffset: 157;
  transition: stroke-dashoffset 1s ease;
}

/* Charts Section */
.charts-section {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 20px;
  margin-bottom: 30px;
}

.glass-chart-card, .glass-activity-card {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 20px;
  padding: 25px;
}

/* Chart Controls */
.chart-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.chart-header h4 {
  color: white;
  margin: 0;
  font-size: 18px;
  font-weight: 600;
}

.chart-controls {
  display: flex;
  gap: 8px;
}

.control-btn {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: rgba(255, 255, 255, 0.7);
  padding: 8px 16px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.control-btn:hover {
  background: rgba(255, 255, 255, 0.2);
  color: white;
  transform: translateY(-1px);
}

.control-btn.active {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-color: rgba(255, 255, 255, 0.3);
  color: white;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.control-btn.active:hover {
  transform: translateY(-1px);
  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
}
  position: relative;
  overflow: hidden;
}

.chart-header, .activity-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.chart-header h4, .activity-header h4 {
  color: white;
  margin: 0;
  font-size: 20px;
  font-weight: 600;
}

.chart-container {
  height: 300px;
  position: relative;
}

/* Activity Timeline */
.activity-timeline {
  max-height: 300px;
  overflow-y: auto;
}

.activity-item {
  display: flex;
  align-items: center;
  padding: 15px;
  margin-bottom: 10px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  border-left: 4px solid #4ade80;
  animation: slideInUp 0.5s ease forwards;
}

.activity-icon {
  width: 40px;
  height: 40px;
  background: rgba(74, 222, 128, 0.2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 15px;
  color: #4ade80;
}

.activity-content h6 {
  color: white;
  margin: 0 0 5px 0;
  font-size: 14px;
}

.activity-content small {
  color: rgba(255, 255, 255, 0.7);
}

/* Animations */
.success-animation {
  position: absolute;
  bottom: 20px;
  right: 20px;
  width: 40px;
  height: 40px;
}

.checkmark {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { transform: scale(1); opacity: 1; }
  50% { transform: scale(1.1); opacity: 0.8; }
}

.pulse-indicator {
  position: absolute;
  bottom: 20px;
  right: 20px;
  width: 12px;
  height: 12px;
  background: #ff6b6b;
  border-radius: 50%;
  animation: pulse-dot 1.5s infinite;
}

@keyframes pulse-dot {
  0%, 100% { transform: scale(1); opacity: 1; }
  50% { transform: scale(1.5); opacity: 0.5; }
}

.alert-pulse {
  position: absolute;
  bottom: 20px;
  right: 20px;
  width: 12px;
  height: 12px;
  background: #ff4757;
  border-radius: 50%;
  animation: alert-pulse 1s infinite;
}

@keyframes alert-pulse {
  0%, 100% { transform: scale(1); opacity: 1; }
  50% { transform: scale(2); opacity: 0.3; }
}

.loading-state {
  text-align: center;
  padding: 40px 20px;
  color: rgba(255, 255, 255, 0.8);
}

.loading-dots {
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-bottom: 15px;
}

.loading-dots span {
  width: 8px;
  height: 8px;
  background: white;
  border-radius: 50%;
  animation: loading-bounce 1.4s infinite ease-in-out;
}

.loading-dots span:nth-child(1) { animation-delay: -0.32s; }
.loading-dots span:nth-child(2) { animation-delay: -0.16s; }

@keyframes loading-bounce {
  0%, 80%, 100% { transform: scale(0); }
  40% { transform: scale(1); }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Responsive */
@media (max-width: 768px) {
  .charts-section {
    grid-template-columns: 1fr;
  }
  
  .header-content {
    flex-direction: column;
    gap: 20px;
  }
  
  .header-stats {
    justify-content: center;
  }
}
</style>

<!-- Dashboard Glassmorphism - Estilo 1 -->
<div class="dashboard-container">
  <!-- Header con efecto cristal -->
  <div class="glass-header">
    <div class="header-content">
      <div class="user-section">
        <div class="user-avatar-glass">
          <div class="avatar-ring"></div>
          <div class="avatar-inner">
            <i class="fas fa-user"></i>
          </div>
        </div>
        <div class="user-info">
          <h2 class="user-name" id="user-name-glass">Usuario</h2>
          <p class="user-role" id="user-role-glass">Cargando...</p>
        </div>
      </div>
      <div class="header-stats">
        <div class="stat-item">
          <span class="stat-number" id="today-tasks-count-glass">0</span>
          <span class="stat-label">Hoy</span>
    </div>
        <div class="stat-item">
          <span class="stat-number" id="completed-tasks-count-glass">0</span>
          <span class="stat-label">Completadas</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Cards con efecto cristal -->
  <div class="stats-grid">
    <div class="glass-card primary">
      <div class="card-icon">
        <i class="fas fa-tasks"></i>
      </div>
      <div class="card-content">
        <h3 id="card-today-tasks-count">0</h3>
        <p>Tareas de Hoy</p>
        <div class="progress-ring">
          <svg class="progress-circle" width="60" height="60">
            <circle cx="30" cy="30" r="25" class="progress-bg"></circle>
            <circle cx="30" cy="30" r="25" class="progress-fill" id="card-today-progress"></circle>
              </svg>
      </div>
    </div>
  </div>

    <div class="glass-card success">
      <div class="card-icon">
        <i class="fas fa-check-circle"></i>
            </div>
      <div class="card-content">
        <h3 id="card-completed-tasks-count">0</h3>
        <p>Completadas</p>
        <div class="success-animation">
          <div class="checkmark">
            <i class="fas fa-check"></i>
        </div>
      </div>
    </div>
  </div>

    <div class="glass-card warning">
      <div class="card-icon">
        <i class="fas fa-clock"></i>
            </div>
      <div class="card-content">
        <h3 id="card-in-progress-count">0</h3>
        <p>En Progreso</p>
        <div class="pulse-indicator"></div>
  </div>
</div>

    <div class="glass-card danger">
      <div class="card-icon">
        <i class="fas fa-exclamation-triangle"></i>
      </div>
      <div class="card-content">
        <h3 id="card-overdue-tasks-count">0</h3>
        <p>Vencidas</p>
        <div class="alert-pulse"></div>
      </div>
    </div>
  </div>

  <!-- Charts Section -->
  <div class="charts-section">
    <div class="glass-chart-card">
      <div class="chart-header">
        <h4>Progreso Semanal</h4>
        <div class="chart-controls">
          <button class="control-btn active">Semana</button>
          <button class="control-btn">Mes</button>
        </div>
      </div>
      <div class="chart-container">
        <canvas id="weeklyProgressChart"></canvas>
  </div>
</div>

    <div class="glass-activity-card">
      <div class="activity-header">
        <h4>Actividad Reciente</h4>
        <div class="activity-indicator">
          <div class="indicator-dot"></div>
          <span>En vivo</span>
        </div>
      </div>
      <div class="activity-timeline" id="recent-activity-container-glass">
        <div class="loading-state">
          <div class="loading-dots">
            <span></span><span></span><span></span>
          </div>
          <p>Cargando actividad...</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Funciones para el dashboard Glassmorphism
function loadDashboardData() {
  console.log('📊 Cargando datos del dashboard...');
  
  // Cargar estadísticas
  fetch('/agendatce/api/dashboard/stats', {
    credentials: 'include'
  })
    .then(response => {
      console.log('📡 Respuesta stats:', response.status);
      return response.json();
    })
    .then(data => {
    console.log('📊 Datos stats completos:', data);
    
      if (data.success) {
      // Usar los datos directamente del backend (ya calculados correctamente)
      const totalToday = data.data.today_tasks || 0; // Total de tareas del día
      const completedToday = data.data.completed_today || 0; // Tareas completadas hoy
      const inProgress = data.data.in_progress || 0;
      const overdue = data.data.overdue || 0;
      
      console.log('📊 Datos del backend:', {
        totalToday,
        completedToday,
        inProgress,
        overdue
      });
      
      // Actualizar elementos del header
      const headerTodayEl = document.getElementById('today-tasks-count-glass');
      const headerCompletedEl = document.getElementById('completed-tasks-count-glass');
      
      // Actualizar elementos de las tarjetas principales
      const cardTodayEl = document.getElementById('card-today-tasks-count');
      const cardCompletedEl = document.getElementById('card-completed-tasks-count');
      const cardInProgressEl = document.getElementById('card-in-progress-count');
      const cardOverdueEl = document.getElementById('card-overdue-tasks-count');
      
      console.log('🔍 Elementos encontrados:', {
        headerTodayEl: !!headerTodayEl,
        headerCompletedEl: !!headerCompletedEl,
        cardTodayEl: !!cardTodayEl,
        cardCompletedEl: !!cardCompletedEl,
        cardInProgressEl: !!cardInProgressEl,
        cardOverdueEl: !!cardOverdueEl
      });
      
      // Actualizar header
      if (headerTodayEl) {
        headerTodayEl.textContent = totalToday;
        console.log('✅ Header - Total tareas de hoy actualizadas:', totalToday);
      }
      if (headerCompletedEl) {
        headerCompletedEl.textContent = completedToday;
        console.log('✅ Header - Tareas completadas actualizadas:', completedToday);
      }
      
      // Actualizar tarjetas principales
      if (cardTodayEl) {
        cardTodayEl.textContent = totalToday;
        animateNumber(cardTodayEl, 0, totalToday);
        console.log('✅ Tarjeta - Total tareas de hoy actualizadas:', totalToday);
      }
      if (cardCompletedEl) {
        cardCompletedEl.textContent = completedToday;
        animateNumber(cardCompletedEl, 0, completedToday);
        console.log('✅ Tarjeta - Tareas completadas actualizadas:', completedToday);
      }
      if (cardInProgressEl) {
        cardInProgressEl.textContent = inProgress;
        animateNumber(cardInProgressEl, 0, inProgress);
        console.log('✅ Tarjeta - Tareas en progreso actualizadas:', inProgress);
      }
      if (cardOverdueEl) {
        cardOverdueEl.textContent = overdue;
        animateNumber(cardOverdueEl, 0, overdue);
        console.log('✅ Tarjeta - Tareas vencidas actualizadas:', overdue);
      }
      
      // Animar progress ring con el total de hoy
      updateProgressRing(totalToday, completedToday);
    } else {
      console.error('❌ Error en respuesta de stats:', data.message);
      }
    })
    .catch(error => {
    console.error('❌ Error cargando estadísticas:', error);
  });
  
  // Cargar progreso semanal
  loadWeeklyProgress();
  
  // Cargar actividad reciente
  loadRecentActivityGlass();
}

function animateNumber(element, start, end) {
  const duration = 1000;
  const startTime = performance.now();
  
  function update(currentTime) {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);
    const current = Math.floor(start + (end - start) * progress);
    element.textContent = current;
    
    if (progress < 1) {
      requestAnimationFrame(update);
    }
  }
  
  requestAnimationFrame(update);
}

function updateProgressRing(total, completed) {
  const progressFill = document.getElementById('card-today-progress');
  if (progressFill && total > 0) {
    const percentage = (completed / total) * 100;
    const circumference = 157; // 2 * PI * 25
    const offset = circumference - (percentage / 100) * circumference;
    
    progressFill.style.strokeDashoffset = offset;
    console.log('🔄 Progress ring actualizado:', percentage + '%');
  }
}

function loadWeeklyProgress() {
  fetch('/agendatce/api/dashboard/weekly', {
    credentials: 'include'
  })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        createWeeklyChart(data.data);
      }
    })
    .catch(error => {
      console.error('Error cargando progreso semanal:', error);
    });
}

function createWeeklyChart(data) {
  const canvas = document.getElementById('weeklyProgressChart');
  if (!canvas) {
    console.warn('⚠️ Canvas weeklyProgressChart no encontrado');
    return;
  }
  
  // Destruir chart existente si existe
  if (window.weeklyChart) {
    window.weeklyChart.destroy();
    window.weeklyChart = null;
  }
  
  const ctx = canvas.getContext('2d');
  
  const completed = data.completed ? data.completed.reduce((a, b) => a + b, 0) : 0;
  const target = data.target ? data.target.reduce((a, b) => a + b, 0) : 0;
  const remaining = Math.max(0, target - completed);
  
  window.weeklyChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['Completadas', 'Pendientes'],
      datasets: [{
        data: [completed, remaining],
        backgroundColor: [
          'rgba(102, 126, 234, 0.8)',
          'rgba(255, 255, 255, 0.3)'
        ],
        borderColor: [
          'rgba(102, 126, 234, 1)',
          'rgba(255, 255, 255, 0.5)'
        ],
        borderWidth: 2
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          labels: {
            color: 'white'
          }
        }
      }
    }
  });
}

function loadRecentActivityGlass() {
  fetch('/agendatce/api/activity/recent', {
    credentials: 'include'
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      displayRecentActivityGlass(data.data);
    }
  })
  .catch(error => {
    console.error('Error cargando actividad reciente glassmorphism:', error);
  });
}

function displayRecentActivityGlass(activities) {
  const container = document.getElementById('recent-activity-container-glass');
  
  if (!container) {
    console.error('❌ Container recent-activity-container-glass no encontrado');
    return;
  }
  
  if (activities.length === 0) {
    container.innerHTML = '<p class="text-center" style="color: rgba(255,255,255,0.8);">No hay actividad reciente</p>';
    return;
  }
  
  container.innerHTML = activities.map((activity, index) => `
    <div class="activity-item" style="
      display: flex;
      align-items: center;
      padding: 15px;
      margin-bottom: 10px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      border-left: 4px solid #4ade80;
      animation: slideInUp 0.5s ease ${index * 0.1}s both;
    ">
      <div class="activity-icon">
        <i class="fas fa-check-circle"></i>
      </div>
      <div class="activity-content">
        <h6>${activity.task_title}</h6>
        <small>${activity.user_name} - ${new Date(activity.created_at).toLocaleString()}</small>
      </div>
    </div>
  `).join('');
}

function updateDashboardUserInfo() {
  // Actualizar información del usuario
  const userNameEl = document.getElementById('user-name-glass');
  const userRoleEl = document.getElementById('user-role-glass');
  
  if (window.currentUser) {
    if (userNameEl) userNameEl.textContent = window.currentUser.name || 'Usuario';
    if (userRoleEl) userRoleEl.textContent = window.currentUser.role_name || 'Cargando...';
    console.log('👤 Usuario actualizado:', window.currentUser.name);
  } else {
    console.log('⚠️ currentUser no disponible');
  }
}

// Función para refrescar datos
function refreshDashboardData() {
  console.log('🔄 Refrescando datos del dashboard...');
  loadDashboardData();
}

// Función para manejar el cambio de período
function switchChartPeriod(period) {
  console.log('📊 Cambiando período a:', period);
  
  // Actualizar botones activos
  const buttons = document.querySelectorAll('.control-btn');
  buttons.forEach(btn => btn.classList.remove('active'));
  
  const activeButton = Array.from(buttons).find(btn => btn.textContent === period);
  if (activeButton) {
    activeButton.classList.add('active');
  }
  
  // Actualizar título del gráfico
  const chartTitle = document.querySelector('.chart-header h4');
  if (chartTitle) {
    chartTitle.textContent = period === 'Semana' ? 'Progreso Semanal' : 'Progreso Mensual';
  }
  
  // Cargar datos según el período
  if (period === 'Semana') {
    loadWeeklyProgress();
  } else if (period === 'Mes') {
    loadMonthlyProgress();
  }
}

// Función para cargar progreso mensual
function loadMonthlyProgress() {
  console.log('📊 Cargando progreso mensual...');
  
  // Por ahora usamos los mismos datos semanales
  // En el futuro se puede crear un endpoint específico para mensual
  fetch('/agendatce/api/dashboard/weekly', {
    credentials: 'include'
  })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        createMonthlyChart(data.data);
      }
    })
    .catch(error => {
      console.error('Error cargando progreso mensual:', error);
    });
}

// Función para crear gráfico mensual
function createMonthlyChart(data) {
  const canvas = document.getElementById('weeklyProgressChart');
  if (!canvas) {
    console.warn('⚠️ Canvas weeklyProgressChart no encontrado');
    return;
  }

  // Destruir gráfico existente si existe
  if (window.weeklyChart) {
    window.weeklyChart.destroy();
  }

  const ctx = canvas.getContext('2d');
  
  // Simular datos mensuales (4 semanas)
  const weeklyData = [8, 12, 6, 15]; // Datos simulados para 4 semanas
  const weeklyTargets = [10, 10, 10, 10]; // Metas semanales
  
  window.weeklyChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Semana 1', 'Semana 2', 'Semana 3', 'Semana 4'],
      datasets: [{
        label: 'Completadas',
        data: weeklyData,
        backgroundColor: 'rgba(102, 126, 234, 0.8)',
        borderColor: 'rgba(102, 126, 234, 1)',
        borderWidth: 2,
        borderRadius: 8,
        borderSkipped: false,
      }, {
        label: 'Meta',
        data: weeklyTargets,
        backgroundColor: 'rgba(255, 255, 255, 0.3)',
        borderColor: 'rgba(255, 255, 255, 0.5)',
        borderWidth: 2,
        borderRadius: 8,
        borderSkipped: false,
        type: 'line',
        fill: false,
        tension: 0.4
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          labels: {
            color: 'rgba(255, 255, 255, 0.8)'
          }
        }
      },
      scales: {
        x: {
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          },
          ticks: {
            color: 'rgba(255, 255, 255, 0.7)'
          }
        },
        y: {
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          },
          ticks: {
            color: 'rgba(255, 255, 255, 0.7)'
          }
        }
      }
    }
  });
  
  console.log('📊 Gráfico mensual creado');
}

// Cargar datos cuando se carga la sección
console.log('🚀 Inicializando dashboard Glassmorphism...');
loadDashboardData();
updateDashboardUserInfo();

// Configurar event listeners para los botones de control
document.addEventListener('DOMContentLoaded', function() {
  const controlButtons = document.querySelectorAll('.control-btn');
  controlButtons.forEach(button => {
    button.addEventListener('click', function() {
      const period = this.textContent;
      switchChartPeriod(period);
    });
  });
});

// Refrescar datos cada 30 segundos
setInterval(refreshDashboardData, 30000);

// También refrescar cuando se hace foco en la ventana
window.addEventListener('focus', refreshDashboardData);
</script>