<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Agenda TCE</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .navbar {
            background: rgba(255, 255, 255, 0.1) !important;
            backdrop-filter: blur(10px);
            z-index: 1050;
        }
        .dropdown-menu {
            z-index: 1060 !important;
        }
        .navbar-brand, .nav-link {
            color: white !important;
        }
        .nav-link:hover {
            color: rgba(255, 255, 255, 0.8) !important;
        }
        .nav-link.active {
            color: #ffd700 !important;
            font-weight: bold;
        }
        .main-content {
            min-height: calc(100vh - 76px);
            padding: 20px 0;
        }
    </style>
</head>
<body>
    <!-- Navegaci√≥n -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#" onclick="loadSection('dashboard')">
                <i class="fas fa-calendar-check me-2"></i>
                Sistema de Agenda TCE
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="loadSection('dashboard')">
                            <i class="fas fa-tachometer-alt me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="loadSection('today')">
                            <i class="fas fa-calendar-day me-1"></i>Hoy
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="loadSection('all-tasks')">
                            <i class="fas fa-list me-1"></i>Todas las Tareas
                        </a>
                    </li>
                    <!-- Historial para Admin y Supervisor -->
                    <li class="nav-item admin-supervisor-employee-only" style="display: none;">
                        <a class="nav-link" href="#" onclick="loadSection('history')">
                            <i class="fas fa-history me-1"></i>Historial
                        </a>
                    </li>
                    <!-- Confirmaciones para Admin y Supervisor -->
                    <li class="nav-item " style="display: none;">
                        <a class="nav-link" href="#" onclick="loadSection('confirmations')">
                            <i class="fas fa-check-circle me-1"></i>Confirmaciones
                        </a>
                    </li>
                    <!-- Reconfirmaciones para Admin y Supervisor -->
                    <li class="nav-item " style="display: none;">
                        <a class="nav-link" href="#" onclick="loadSection('reconfirmations')">
                            <i class="fas fa-redo me-1"></i>Reconfirmaciones
                        </a>
                    </li>                    <!-- Configuraci√≥n solo para Admin -->
                    <li class="nav-item admin-only" style="display: none;">
                        <a class="nav-link" href="#" onclick="loadSection('configuration')">
                            <i class="fas fa-cog me-1"></i>Configuraci√≥n
                        </a>
                    </li>
                </ul>
                
                <ul class="navbar-nav">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                            <div class="user-avatar me-2 d-inline-block">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="12" cy="12" r="12" fill="rgba(255,255,255,0.2)"/>
                                    <circle cx="12" cy="9" r="4" fill="rgba(255,255,255,0.8)"/>
                                    <path d="M6 21c0-3.31 2.69-6 6-6s6 2.69 6 6" fill="rgba(255,255,255,0.8)"/>
                                </svg>
                            </div>
                            <span id="current-user-name">Cargando...</span>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><h6 class="dropdown-header">
                                <div id="current-user-email">Cargando...</div>
                                <small class="text-muted" id="current-user-role">Cargando...</small>
                            </h6></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="showUserProfile()">
                                <i class="fas fa-user me-2"></i>Mi Perfil
                            </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item text-danger" href="/" >
                                <i class="fas fa-sign-out-alt me-2"></i>Regresar a Sistema Central
                            </a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Contenido Principal -->
    <div class="main-content">
        <div class="container-fluid">
            <div id="content-container">
                <!-- El contenido se carga din√°micamente aqu√≠ -->
                <div class="text-center py-5">
                    <div class="spinner-border text-light" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-3 text-light">Cargando contenido...</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Variables globales
        let currentUser = null;
        let currentSection = 'dashboard';
        
        // Inicializaci√≥n
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Inicializando sistema de agenda modular...');
            loadCurrentUser();
            loadSection('dashboard');
        });
        
        /**
         * Sube un √∫nico archivo al servidor.
         * @param {File} file - El archivo a subir.
         * @returns {Promise<string>} La URL del archivo subido.
         */
        function subirUnaImagen(file) {
            return new Promise((resolve, reject) => {
                const formData = new FormData();
                formData.append('file', file);
                
                fetch('/guardar-comprobante', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            resolve(data.fileUrl);
                        } else {
                            reject(data.message || 'Error en la subida.');
                        }
                    })
                    .catch(err => {
                        reject('Error de red al subir imagen');
                    });
            });
        }
        
        // Cargar usuario actual
        function loadCurrentUser() {
            console.log('üë§ Cargando usuario actual..hoaaaaaa.');
            fetch('/agendatce/auth/current-user', {
                credentials: 'include'
            })
                .then(response => {
                    console.log('üì° Respuesta del servidor:', response.status, response.statusText);
                    return response.json();
                })
                .then(data => {
                    console.log('üìä Datos recibidos:', data);
                    if (data.success) {
                        console.log('‚úÖ Usuario cargado:', data.data);
                        console.log('üîç Campos espec√≠ficos del usuario:', {
                            name: data.data.name,
                            nombre: data.data.nombre,
                            correo: data.data.correo,
                            email: data.data.email,
                            perfil_usuario: data.data.perfil_usuario,
                            cargo: data.data.cargo
                        });
                        console.log('üîç Objeto completo del usuario:', JSON.stringify(data.data, null, 2));
                        currentUser = data.data;
                        updateUserInfo(data.data);
                        updateNavigationBasedOnRole(data.data);
                    } else {
                        console.error('‚ùå Error en respuesta de usuario:', data.message);
                    }
                })
                .catch(error => {
                    console.error('‚ùå Error cargando usuario actual:', error);
                });
        }
        
        // Actualizar informaci√≥n del usuario
        function updateUserInfo(user) {
            console.log('üë§ Actualizando informaci√≥n del usuario:', user);
            console.log('üë§ Campos del usuario:', {
                name: user.name,
                nombre: user.nombre,
                correo: user.correo,
                perfil_usuario: user.perfil_usuario,
                cargo: user.cargo
            });
            
            const nameElement = document.getElementById('current-user-name');
            const emailElement = document.getElementById('current-user-email');
            const roleElement = document.getElementById('current-user-role');
            
            console.log('üë§ Elementos encontrados:', {
                nameElement: nameElement,
                emailElement: emailElement,
                roleElement: roleElement
            });
            
            // Manejar tanto 'name' como 'nombre'
            const userName = user.name || user.nombre;
            console.log('üë§ Nombre a mostrar:', userName);
            
            if (nameElement && userName) {
                nameElement.textContent = userName;
                console.log('‚úÖ Nombre actualizado en el DOM');
            } else {
                console.log('‚ùå No se pudo actualizar el nombre:', { nameElement: !!nameElement, userName: userName });
            }
            
            if (emailElement && user.correo) {
                emailElement.textContent = user.correo;
                console.log('‚úÖ Email actualizado en el DOM');
            } else {
                console.log('‚ùå No se pudo actualizar el email:', { emailElement: !!emailElement, correo: user.correo });
            }
            
            if (roleElement) {
                const roleText = user.perfil_usuario === 1 ? 'Administrador' : 
                               user.perfil_usuario === 2 ? 'Supervisor' : 'Empleado';
                roleElement.textContent = `${roleText} - ${user.cargo || 'Sin cargo'}`;
                console.log('‚úÖ Rol actualizado en el DOM');
            } else {
                console.log('‚ùå No se pudo actualizar el rol:', { roleElement: !!roleElement });
            }
            
            // Hacer usuario accesible globalmente
            window.currentUser = user;
        }
        
        // Actualizar navegaci√≥n basada en rol
        function updateNavigationBasedOnRole(user) {
            console.log('üîê Actualizando navegaci√≥n basada en rol:', user.perfil_usuario, user.role_name);
            
            const adminOnlyElements = document.querySelectorAll('.admin-only');
            const adminSupervisorElements = document.querySelectorAll('.admin-supervisor-employee-only');
            
            console.log('üìã Elementos admin encontrados:', adminOnlyElements.length);
            console.log('üìã Elementos admin-supervisor encontrados:', adminSupervisorElements.length);
            
            // Forzar ocultar todos los elementos admin primero
            adminOnlyElements.forEach((element, index) => {
                element.style.display = 'none';
                console.log(`‚ùå Ocultando elemento admin ${index}:`, element);
            });
            
            // Forzar ocultar todos los elementos admin-supervisor primero
            adminSupervisorElements.forEach((element, index) => {
                element.style.display = 'none';
                console.log(`‚ùå Ocultando elemento admin-supervisor ${index}:`, element);
            });
            
            if (user.perfil_usuario === 0) { // Admin
                console.log('‚úÖ Usuario es admin - mostrando todas las opciones');
                
                // Mostrar elementos admin (configuraci√≥n)
                adminOnlyElements.forEach((element, index) => {
                    element.style.display = 'block';
                    console.log(`‚úÖ Mostrando elemento admin ${index}:`, element);
                });
                
                // Mostrar elementos admin-supervisor (historial)
                adminSupervisorElements.forEach((element, index) => {
                    element.style.display = 'block';
                    console.log(`‚úÖ Mostrando elemento admin-supervisor ${index}:`, element);
                });
                
            } else if (user.perfil_usuario === 1) { // Supervisor
                console.log('‚úÖ Usuario es supervisor - mostrando historial pero no configuraci√≥n');
                
                // Mostrar solo elementos admin-supervisor (historial)
                adminSupervisorElements.forEach((element, index) => {
                    element.style.display = 'block';
                    console.log(`‚úÖ Mostrando elemento admin-supervisor ${index}:`, element);
                });
                
                // Si el supervisor est√° en configuraci√≥n, redirigir al dashboard
                if (currentSection === 'configuration') {
                    console.log('üîÑ Redirigiendo supervisor de configuraci√≥n al dashboard');
                    loadSection('dashboard');
                }
                
            } else { // Empleados (perfil 2+)
                console.log('‚ùå Usuario no es admin ni supervisor - ocultando opciones de admin');
                
                // Si el usuario no es admin ni supervisor y est√° en una secci√≥n de admin, redirigir al dashboard
                if (currentSection === 'history' || currentSection === 'configuration') {
                    console.log('üîÑ Redirigiendo usuario no-admin del admin al dashboard');
                    loadSection('dashboard');
                }
            }
        }
        
        // Cargar secci√≥n
        function loadSection(sectionName) {
            console.log('üìÇ Cargando secci√≥n:', sectionName);
            currentSection = sectionName;
            
            // Actualizar navegaci√≥n activa
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            
            // Marcar como activo el enlace correspondiente
            const activeLink = document.querySelector(`[onclick="loadSection('${sectionName}')"]`);
            if (activeLink) {
                activeLink.classList.add('active');
            }
            
            // Cargar contenido din√°micamente
            const container = document.getElementById('content-container');
            
            // Mostrar spinner mientras carga
            container.innerHTML = `
                <div class="text-center py-5">
                    <div class="spinner-border text-light" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-3 text-light">Cargando ${sectionName}...</p>
                </div>
            `;
            
            // Cargar el contenido de la secci√≥n
            fetch(`/agendatce/sections/${sectionName}`, {
                credentials: 'include'
            })
                .then(response => response.text())
                .then(html => {
                    // Extraer scripts del HTML
                    const scriptMatch = html.match(/<script>([\s\S]*?)<\/script>/);
                    
                    // Insertar HTML sin scripts
                    const htmlWithoutScripts = html.replace(/<script>[\s\S]*?<\/script>/g, '');
                    container.innerHTML = htmlWithoutScripts;
                    
                    // Ejecutar scripts si existen
                    if (scriptMatch && scriptMatch[1]) {
                        console.log(`üîß Ejecutando scripts para secci√≥n: ${sectionName}`);
                        try {
                            eval(scriptMatch[1]);
                        } catch (error) {
                            console.error('Error ejecutando scripts:', error);
                        }
                    } else {
                        console.log(`‚ùå No se encontraron scripts para: ${sectionName}`);
                    }
                })
                .catch(error => {
                    console.error('Error cargando secci√≥n:', error);
                    container.innerHTML = `
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Error cargando la secci√≥n ${sectionName}
                        </div>
                    `;
                });
        }
        
        // Funciones de usuario
        function showUserProfile() {
            console.log('Mostrando perfil del usuario:', currentUser);
            alert(`Perfil de ${currentUser.name}\nEmail: ${currentUser.correo}\nRol: ${currentUser.role_name}`);
        }
        
        function logout() {
            if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
                fetch('/agendatce/auth/logout', { 
                    method: 'POST',
                    credentials: 'include'
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = '/agendatce/login';
                        }
                    })
                    .catch(error => {
                        console.error('Error cerrando sesi√≥n:', error);
                        window.location.href = '/agendatce/login';
                    });
            }
        }
        
        // Funci√≥n de debug
        function debugAdminElements() {
            console.log('üîç DEBUG: Verificando elementos admin...');
            const adminOnlyElements = document.querySelectorAll('.admin-only');
            console.log('Elementos admin encontrados:', adminOnlyElements.length);
            
            adminOnlyElements.forEach((element, index) => {
                console.log(`Elemento ${index}:`, element);
                console.log(`  - Display: ${element.style.display}`);
                console.log(`  - Visible: ${element.offsetParent !== null}`);
                console.log(`  - Texto: ${element.textContent.trim()}`);
            });
            
            if (currentUser) {
                console.log('Usuario actual:', currentUser);
                console.log('Perfil usuario:', currentUser.perfil_usuario);
                console.log('Rol:', currentUser.role_name);
            }
        }
        
        // Hacer funci√≥n de debug accesible globalmente
        window.debugAdminElements = debugAdminElements;
        
        // ===== FUNCIONES DE CONFIGURACI√ìN =====
        
        // Variable global para almacenar todos los empleados de agenda
        let allEmployees = [];
        
        // Variable global para almacenar todas las etiquetas
        let allTags = [];
        
        // Cargar empleados de agenda para modales de tareas
        async function loadEmployeesForTaskModals() {
            try {
                console.log('üë• Cargando empleados de agenda para modales de tareas...');
                const response = await fetch('/agendatce/api/configuration/employees', {
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('üìä Empleados de agenda cargados:', data);
                
                if (data.success && data.data) {
                    allEmployees = data.data;
                    console.log('‚úÖ Empleados de agenda almacenados:', allEmployees.length);
                } else {
                    console.error('‚ùå Error cargando empleados:', data.message);
                    allEmployees = [];
                }
            } catch (error) {
                console.error('‚ùå Error cargando empleados:', error);
                allEmployees = [];
            }
        }
        
        // Cargar datos de configuraci√≥n cuando se carga la secci√≥n
        function loadConfigurationData() {
            console.log('üîß Cargando datos de configuraci√≥n...');
            
            // Cargar empleados
            loadEmployees();
            
            // Cargar departamentos para los selects
            loadDepartmentsForSelect();
            
            // Cargar tareas
            loadTasks();
            
            // Cargar departamentos
            loadDepartments();
            
            // Cargar etiquetas
            loadTags();
        }
        
        // Cargar empleados
        async function loadEmployees() {
            try {
                console.log('üë• Cargando empleados...');
                const response = await fetch('/agendatce/api/configuration/employees', {
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('üìä Respuesta de empleados:', data);
                
                if (data.success && data.data) {
                    // Asegurar que data.data sea un array
                    if (Array.isArray(data.data)) {
                        // Los empleados de agenda se guardan en una variable local, no global
                        renderEmployees(data.data);
                    } else {
                        console.error('‚ùå data.data no es un array:', typeof data.data, data.data);
                        showConfigurationError('Error: Los datos de empleados no est√°n en el formato esperado');
                    }
                } else {
                    showConfigurationError('Error al cargar empleados: ' + (data.message || 'Error desconocido'));
                }
            } catch (error) {
                console.error('‚ùå Error cargando empleados:', error);
                showConfigurationError('Error al cargar empleados: ' + error.message);
            }
        }
        
        // Renderizar empleados
        function renderEmployees(employees) {
            console.log('üé® Renderizando empleados:', employees.length);
            
            const container = document.getElementById('employees-container');
            if (!container) {
                console.log('‚è∞ Container de empleados no encontrado, reintentando en 500ms...');
                setTimeout(() => {
                    renderEmployees(employees);
                }, 500);
                return;
            }
            
            if (employees.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-users fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No hay empleados registrados</h5>
                        <p class="text-muted">Agrega el primer empleado para comenzar</p>
                    </div>
                `;
                return;
            }
            
            const employeesHTML = employees.map(employee => `
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <div class="d-flex align-items-center">
                                    <div class="me-3">
                                        <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                            <i class="fas fa-user text-white"></i>
                                        </div>
                                    </div>
                                    <div>
                                        <h6 class="mb-1">${employee.name}</h6>
                                        <p class="mb-1 text-muted">${employee.correo}</p>
                                        <p class="mb-0 text-muted">${employee.cargo || 'Sin cargo'}</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 text-end">
                                <span class="badge ${getRoleColor(employee.perfil_usuario)} me-2">
                                    ${getRoleText(employee.perfil_usuario)}
                                </span>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-sm btn-outline-primary" onclick="editEmployee('${employee._id}')" title="Editar">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteEmployee('${employee._id}')" title="Eliminar">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = employeesHTML;
        }
        
        // Obtener color del rol
        function getRoleColor(role) {
            switch (role) {
                case 0: return 'bg-danger';
                case 1: return 'bg-warning';
                case 2: return 'bg-info';
                case 3: return 'bg-info';
                case 4: return 'bg-info';
                case 5: return 'bg-info';
                case 6: return 'bg-info';
                case 7: return 'bg-info';
                case 8: return 'bg-info';
                case 9: return 'bg-info';
                case 10: return 'bg-info';
                case 11: return 'bg-info';
                case 12: return 'bg-info';
                case 13: return 'bg-info';
                case 14: return 'bg-info';
                case 15: return 'bg-info';
                case 16: return 'bg-info';
                case 17: return 'bg-info';
                case 18: return 'bg-info';
                case 19: return 'bg-info';
                case 20: return 'bg-info';
                default: return 'bg-secondary';
            }
        }
        
        // Obtener texto del rol
        function getRoleText(role) {
            switch (role) {
                case 0: return 'Admin';
                case 1: return 'Supervisor';
                case 2: return 'Empleado';
                case 3: return 'Empleado';
                case 4: return 'Empleado';
                case 5: return 'Empleado';
                case 6: return 'Empleado';
                case 7: return 'Empleado';
                case 8: return 'Empleado';
                case 9: return 'Empleado';
                case 10: return 'Empleado';
                case 11: return 'Empleado'; 
                case 12: return 'Empleado';
                default: return 'Desconocido';
            }
        }
        
        // Mostrar error de configuraci√≥n
        function showConfigurationError(message) {
            const container = document.getElementById('employees-container');
            if (container) {
                container.innerHTML = `
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        ${message}
                    </div>
                `;
            }
        }
        
        // Mostrar error de configuraci√≥n
        function showConfigurationError(message) {
            const container = document.getElementById('tasksContainer') || 
                             document.getElementById('employeesContainer') || 
                             document.getElementById('departmentsContainer') || 
                             document.getElementById('tagsContainer');
            
            if (container) {
                container.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        ${message}
                    </div>
                `;
            }
        }
        
        // Cargar tareas
        async function loadTasks() {
            try {
                console.log('üìã Iniciando carga de tareas...');
                
                // Verificar que el contenedor existe
                const container = document.getElementById('tasksContainer');
                if (!container) {
                    console.log('‚è∞ Container no encontrado, reintentando en 200ms...');
                    setTimeout(() => {
                        loadTasks();
                    }, 200);
                    return;
                }
                
                console.log('üìã Container encontrado, haciendo petici√≥n...');
                const response = await fetch('/agendatce/api/configuration/tasks', {
                    credentials: 'include'
                });
                
                console.log('üìã Respuesta de tareas:', response.status, response.statusText);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('üìä Tareas obtenidas:', data);
                
                if (data.success) {
                    console.log('üìã Renderizando tareas...');
                    renderTasks(data.data);
                } else {
                    console.error('‚ùå Error en respuesta:', data.message);
                    showConfigurationError('Error al cargar tareas: ' + (data.message || 'Error desconocido'));
                }
            } catch (error) {
                console.error('‚ùå Error cargando tareas:', error);
                showConfigurationError('Error al cargar tareas: ' + error.message);
            }
        }
        
        // Cargar departamentos para selects
        async function loadDepartmentsForSelect() {
            try {
                console.log('üè¢ Cargando departamentos para selects...');
                const response = await fetch('/agendatce/api/configuration/departments', {
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Departamentos para selects:', data);
                
                if (data.success && data.data) {
                    populateDepartmentSelects(data.data);
                }
            } catch (error) {
                console.error('‚ùå Error cargando departamentos para selects:', error);
            }
        }
        
        // Poblar selects de departamentos
        function populateDepartmentSelects(departments) {
            const selects = [
                'employeeDepartment', 
                'editEmployeeDepartment',
                'addTaskDepartment',    // ‚úÖ AGREGAR ESTE
                'editTaskDepartment'    // ‚úÖ AGREGAR ESTE
            ];
            
            selects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (select) {
                    select.innerHTML = '<option value="">Seleccionar departamento</option>';
                    departments.forEach(dept => {
                        select.innerHTML += `<option value="${dept._id}">${dept.name}</option>`;
                    });
                }
            });
        }
        
        // Mostrar modal de agregar empleado
        async function showAddEmployeeModal() {
            await loadSystemUsers();
            console.log('‚ûï yorman showAddEmployeeModal yorman');
            const modal = new bootstrap.Modal(document.getElementById('addEmployeeModal'));
            modal.show();
        }

        async function loadSystemUsers() {
            console.log('üîÑ yorman loadSystemUsers yorman 1');
            try {
                const response = await fetch('/agendatce/auth/available-users', {
                    credentials: 'include'
                });
                console.log('üîÑ yorman loadSystemUsers yorman - Response:', response);
                
                if (response.ok) {
                    const result = await response.json();
                    const systemUsersSelect = document.getElementById('employeeSystemUser');
                    
                    // Limpiar opciones existentes
                    systemUsersSelect.innerHTML = '<option value="">Sin enlace (usuario independiente)</option>';
                    
                    if (result.success && result.data) {
                        // Filtrar usuarios que no tengan enlace con agenda
                        const availableUsers = result.data.filter(user => !user.has_agenda_link);
                        
                        availableUsers.forEach(user => {
                            const option = document.createElement('option');
                            option.value = user._id;
                            option.textContent = `${user.name} (${user.correo}) - ${user.role_name}`;
                            systemUsersSelect.appendChild(option);
                        });
                        
                        if (availableUsers.length === 0) {
                            const option = document.createElement('option');
                            option.value = '';
                            option.textContent = 'No hay usuarios disponibles para enlace';
                            option.disabled = true;
                            systemUsersSelect.appendChild(option);
                        }
                    }
                } else {
                    console.error('Error cargando usuarios del sistema:', response.status);
                }
            } catch (error) {
                console.error('Error cargando usuarios del sistema:', error);
            }
        }

        // Variables globales para el modal de b√∫squeda
        let currentModalType = ''; // 'add' o 'edit'
        let selectedUserId = '';
        let filteredUsers = [];

        // Abrir modal de b√∫squeda de usuarios
        async function openUserSearchModal(modalType) {
            currentModalType = modalType;
            selectedUserId = '';
            
            // Limpiar b√∫squeda
            document.getElementById('userSearchInput').value = '';
            document.getElementById('userSearchResults').innerHTML = `
                <div class="text-center text-muted py-4">
                    <i class="fas fa-spinner fa-spin fa-2x mb-2"></i>
                    <p>Cargando usuarios...</p>
                </div>
            `;
            document.getElementById('userSearchCount').textContent = '0 usuarios';
            document.getElementById('selectUserBtn').disabled = true;
            
            // Cargar usuarios si no est√°n cargados
            if (allSystemUsers.length === 0) {
                await loadAllUsers();
            }
            
            // Mostrar todos los usuarios al abrir el modal
            displayUserResults(allSystemUsers);
            
            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('userSearchModal'));
            modal.show();
        }

        // Cargar todos los usuarios del sistema
        async function loadAllUsers() {
            try {
                console.log('üîÑ Cargando todos los usuarios del sistema...');
                const response = await fetch('/agendatce/auth/available-users', {
                    credentials: 'include'
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success && result.data) {
                        allSystemUsers = result.data;
                        console.log('‚úÖ Usuarios cargados:', allSystemUsers.length);
                        console.log('üìã Lista completa de usuarios:', allSystemUsers.map(u => ({
                            _id: u._id,
                            name: u.name,
                            correo: u.correo,
                            perfil_usuario: u.perfil_usuario,
                            role_name: u.role_name
                        })));

                        const users = result.data;           
                        const resultsContainer = document.getElementById('userSearchResults');
            const countElement = document.getElementById('userSearchCount');
            
            if (!resultsContainer) {
                console.error('‚ùå No se encontr√≥ el elemento userSearchResults');
                return;
            }
            
            if (!countElement) {
                console.error('‚ùå No se encontr√≥ el elemento userSearchCount');
                return;
            }
            
            countElement.textContent = `${users.length} usuario${users.length !== 1 ? 's' : ''}`;
            
            if (users.length === 0) {
                resultsContainer.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-user-times fa-2x mb-2"></i>
                        <p>No se encontraron usuarios</p>
                    </div>
                `;
                return;
            }
            
            console.log('üéØ displayUserResults - Generando HTML para', users.length, 'usuarios');
            
            resultsContainer.innerHTML = users.map(user => `
                <div class="card mb-2 user-result-card" data-user-id="${user._id}" onclick="selectUserFromList('${user._id}')">
                    <div class="card-body py-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-1">${user.name || 'Sin nombre'}</h6>
                                <small class="text-muted">${user.correo || 'Sin correo'}</small>
                            </div>
                            <div class="text-end">
                                <span class="badge bg-primary">${user.role_name || 'Usuario'}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');







                    } else {
                        console.error('‚ùå Error en respuesta:', result);
                    }
                } else {
                    console.error('‚ùå Error cargando usuarios:', response.status);
                }
            } catch (error) {
                console.error('‚ùå Error cargando usuarios:', error);
            }
        }

        // Mostrar resultados de b√∫squeda
        function displayUserResults(users) {
            console.log('üéØ displayUserResults - Usuarios recibidos:', users.length);
            console.log('üéØ displayUserResults - Primeros 5 usuarios:', users.slice(0, 5));
            
            const resultsContainer = document.getElementById('userSearchResults');
            const countElement = document.getElementById('userSearchCount');
            
            if (!resultsContainer) {
                console.error('‚ùå No se encontr√≥ el elemento userSearchResults');
                return;
            }
            
            if (!countElement) {
                console.error('‚ùå No se encontr√≥ el elemento userSearchCount');
                return;
            }
            
            countElement.textContent = `${users.length} usuario${users.length !== 1 ? 's' : ''}`;
            
            if (users.length === 0) {
                resultsContainer.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-user-times fa-2x mb-2"></i>
                        <p>No se encontraron usuarios</p>
                    </div>
                `;
                return;
            }
            
            console.log('üéØ displayUserResults - Generando HTML para', users.length, 'usuarios');
            
            resultsContainer.innerHTML = users.map(user => `
                <div class="card mb-2 user-result-card" data-user-id="${user._id}" onclick="selectUserFromList('${user._id}')">
                    <div class="card-body py-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-1">${user.name || 'Sin nombre'}</h6>
                                <small class="text-muted">${user.correo || 'Sin correo'}</small>
                            </div>
                            <div class="text-end">
                                <span class="badge bg-primary">${user.role_name || 'Usuario'}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            console.log('‚úÖ displayUserResults - HTML generado para', users.length, 'usuarios');
        }

        // Seleccionar usuario de la lista
        function selectUserFromList(userId) {
            // Remover selecci√≥n anterior
            document.querySelectorAll('.user-result-card').forEach(card => {
                card.classList.remove('border-primary', 'bg-light');
            });
            
            // Seleccionar nuevo usuario
            const selectedCard = document.querySelector(`[data-user-id="${userId}"]`);
            if (selectedCard) {
                selectedCard.classList.add('border-primary', 'bg-light');
                selectedUserId = userId;
                document.getElementById('selectUserBtn').disabled = false;
            }
        }

        // Confirmar selecci√≥n de usuario
        function selectUser() {
            if (!selectedUserId) return;
            
            const user = allSystemUsers.find(u => u._id === selectedUserId);
            if (!user) return;
            
            // Actualizar el campo correspondiente
            if (currentModalType === 'add') {
                document.getElementById('employeeSystemUser').value = user._id;
                document.getElementById('employeeSystemUserDisplay').value = `${user.name} (${user.correo})`;
                document.getElementById('clearUserBtnAdd').style.display = 'inline-block';
            } else if (currentModalType === 'edit') {
                document.getElementById('editEmployeeSystemUser').value = user._id;
                document.getElementById('editEmployeeSystemUserDisplay').value = `${user.name} (${user.correo})`;
                document.getElementById('clearUserBtnEdit').style.display = 'inline-block';
            }
            
            // Cerrar modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('userSearchModal'));
            modal.hide();
            
            console.log('‚úÖ Usuario seleccionado:', user.name);
        }

        // Limpiar selecci√≥n de usuario
        function clearUserSelection(modalType) {
            if (modalType === 'add') {
                document.getElementById('employeeSystemUser').value = '';
                document.getElementById('employeeSystemUserDisplay').value = '';
                document.getElementById('clearUserBtnAdd').style.display = 'none';
            } else if (modalType === 'edit') {
                document.getElementById('editEmployeeSystemUser').value = '';
                document.getElementById('editEmployeeSystemUserDisplay').value = '';
                document.getElementById('clearUserBtnEdit').style.display = 'none';
            }
        }

        
        // Guardar empleado
        async function saveEmployee() {
            try {
                console.log('üíæ Guardando empleado...');
                
                const employeeData = {
                    name: document.getElementById('employeeName').value,
                    correo: document.getElementById('employeeEmail').value,
                    perfil_usuario: parseInt(document.getElementById('employeeRole').value),
                    departamento: document.getElementById('employeeDepartment').value,
                    cargo: document.getElementById('employeePosition').value,
                    activo: true
                };
                
                console.log('üìù Datos del empleado:', employeeData);
                
                const response = await fetch('/agendatce/api/configuration/employees', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(employeeData)
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de guardado:', data);
                
                if (data.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addEmployeeModal'));
                    modal.hide();
                    
                    // Limpiar formulario
                    document.getElementById('addEmployeeForm').reset();
                    
                    // Recargar empleados
                    loadEmployees();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Empleado creado exitosamente', 'success');
                } else {
                    showAlert('Error al crear empleado: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error guardando empleado:', error);
                showAlert('Error al crear empleado: ' + error.message, 'danger');
            }
        }
        
        // Editar empleado
        async function editEmployee(employeeId) {
            try {
                console.log('‚úèÔ∏è Editando empleado:', employeeId);
                
                // Obtener datos del empleado
                const response = await fetch(`/agendatce/api/configuration/employees/${employeeId}`, {
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Datos del empleado:', data);
                
                if (data.success && data.data) {
                    const employee = data.data;
                    
                    console.log('üë§ Datos del empleado para edici√≥n:', {
                        name: employee.name,
                        user_id: employee.user_id,
                        system_user_id: employee.system_user_id
                    });
                    
                    // Cargar usuario actual si existe
                    if (employee.user_id) {
                        // Buscar el usuario enlazado para mostrar su informaci√≥n
                        try {
                            const userResponse = await fetch('/agendatce/auth/available-users', {
                                credentials: 'include'
                            });
                            if (userResponse.ok) {
                                const userResult = await userResponse.json();
                                if (userResult.success && userResult.data) {
                                    const linkedUser = userResult.data.find(u => u._id === employee.user_id);
                                    if (linkedUser) {
                                        document.getElementById('editEmployeeSystemUser').value = linkedUser._id;
                                        document.getElementById('editEmployeeSystemUserDisplay').value = `${linkedUser.name} (${linkedUser.correo})`;
                                        document.getElementById('clearUserBtnEdit').style.display = 'inline-block';
                                    }
                                }
                            }
                        } catch (error) {
                            console.error('Error cargando usuario enlazado:', error);
                        }
                    }
                    
                    // Llenar el modal de edici√≥n
                    document.getElementById('editEmployeeName').value = employee.name;
                    document.getElementById('editEmployeeEmail').value = employee.correo;
                    document.getElementById('editEmployeeRole').value = employee.perfil_usuario;
                    document.getElementById('editEmployeeDepartment').value = employee.departamento;
                    document.getElementById('editEmployeePosition').value = employee.cargo || '';
                    document.getElementById('editEmployeeActive').checked = employee.activo !== false;
                    
                    // Guardar el ID del empleado para la actualizaci√≥n
                    window.editingEmployeeId = employeeId;
                    
                    // Mostrar el modal
                    const modal = new bootstrap.Modal(document.getElementById('editEmployeeModal'));
                    modal.show();
                } else {
                    showAlert('Error al cargar datos del empleado: ' + (data.message || 'Error desconocido'), 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error cargando empleado:', error);
                showAlert('Error al cargar datos del empleado: ' + error.message, 'danger');
            }
        }
        
        // Actualizar empleado
        async function updateEmployee() {
            try {
                console.log('üíæ Actualizando empleado:', window.editingEmployeeId);
                
                if (!window.editingEmployeeId) {
                    showAlert('Error: No se ha seleccionado un empleado para editar', 'danger');
                    return;
                }
                
                const employeeData = {
                    name: document.getElementById('editEmployeeName').value,
                    correo: document.getElementById('editEmployeeEmail').value,
                    perfil_usuario: parseInt(document.getElementById('editEmployeeRole').value),
                    departamento: document.getElementById('editEmployeeDepartment').value,
                    cargo: document.getElementById('editEmployeePosition').value,
                    activo: document.getElementById('editEmployeeActive').checked,
                    user_id: document.getElementById('editEmployeeSystemUser').value || null
                };
                
                console.log('üìù Datos del empleado a actualizar:', employeeData);
                
                const response = await fetch(`/agendatce/api/configuration/employees/${window.editingEmployeeId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(employeeData)
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de actualizaci√≥n:', data);
                
                if (data.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editEmployeeModal'));
                    modal.hide();
                    
                    // Limpiar ID de edici√≥n
                    window.editingEmployeeId = null;
                    
                    // Recargar empleados
                    loadEmployees();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Empleado actualizado exitosamente', 'success');
                } else {
                    showAlert('Error al actualizar empleado: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error actualizando empleado:', error);
                showAlert('Error al actualizar empleado: ' + error.message, 'danger');
            }
        }
        
        // Eliminar empleado
        async function deleteEmployee(employeeId) {
            try {
                console.log('üóëÔ∏è Eliminando empleado:', employeeId);
                
                // Confirmar eliminaci√≥n
                if (!confirm('¬øEst√°s seguro de que deseas eliminar este empleado? Esta acci√≥n no se puede deshacer.')) {
                    return;
                }
                
                const response = await fetch(`/agendatce/api/configuration/employees/${employeeId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de eliminaci√≥n:', data);
                
                if (data.success) {
                    // Recargar empleados
                    loadEmployees();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Empleado eliminado exitosamente', 'success');
                } else {
                    showAlert('Error al eliminar empleado: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error eliminando empleado:', error);
                showAlert('Error al eliminar empleado: ' + error.message, 'danger');
            }
        }
        
        // Mostrar alerta
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            // Insertar al inicio del contenido
            const container = document.getElementById('content-container');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
                
                // Auto-remover despu√©s de 5 segundos
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }
        }
        
        // ===== FUNCIONES PARA GESTI√ìN DE DEPARTAMENTOS =====
        
        // Cargar departamentos
        async function loadDepartments() {
            try {
                console.log('üè¢ Cargando departamentos...');
                const response = await fetch('/agendatce/api/configuration/departments', {
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('üìä Respuesta de departamentos:', data);
                
                if (data.success && data.data) {
                    renderDepartments(data.data);
                } else {
                    showConfigurationError('Error al cargar departamentos: ' + (data.message || 'Error desconocido'));
                }
            } catch (error) {
                console.error('‚ùå Error cargando departamentos:', error);
                showConfigurationError('Error al cargar departamentos: ' + error.message);
            }
        }
        
        // Renderizar departamentos
        function renderDepartments(departments) {
            console.log('üé® Renderizando departamentos:', departments.length);
            
            const container = document.getElementById('departments-container');
            if (!container) {
                console.log('‚è∞ Container de departamentos no encontrado, reintentando en 500ms...');
                setTimeout(() => {
                    renderDepartments(departments);
                }, 500);
                return;
            }
            
            if (!departments || departments.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <p class="text-muted">No hay departamentos disponibles</p>
                    </div>
                `;
                return;
            }
            
            const departmentsHTML = departments.map(dept => `
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title">${dept.name}</h6>
                            <p class="card-text text-muted small">${dept.description || 'Sin descripci√≥n'}</p>
                            <div class="mb-2">
                                <span class="badge bg-primary me-1">${dept.code}</span>
                                ${dept.active ? '<span class="badge bg-success">Activo</span>' : '<span class="badge bg-secondary">Inactivo</span>'}
                            </div>
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="btn-group w-100" role="group">
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="editDepartment('${dept._id}')">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteDepartment('${dept._id}')">
                                    <i class="fas fa-trash"></i> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = `
                <div class="row">
                    ${departmentsHTML}
                </div>
            `;
        }
        
        // Mostrar modal para agregar departamento
        function showAddDepartmentModal() {
            console.log('‚ûï Mostrando modal para agregar departamento');
            
            // Limpiar formulario
            document.getElementById('departmentName').value = '';
            document.getElementById('departmentCode').value = '';
            document.getElementById('departmentDescription').value = '';
            document.getElementById('departmentActive').checked = true;
            
            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('addDepartmentModal'));
            modal.show();
        }
        
        // Guardar nuevo departamento
        async function saveDepartment() {
            try {
                console.log('üíæ Guardando nuevo departamento');
                
                // Validar que se haya seleccionado un pa√≠s
                const country = document.getElementById('departmentCountry').value;
                if (!country) {
                    showAlert('Debes seleccionar un pa√≠s para el departamento', 'warning');
                    return;
                }
                
                const departmentData = {
                    name: document.getElementById('departmentName').value,
                    code: document.getElementById('departmentCode').value,
                    description: document.getElementById('departmentDescription').value,
                    country: document.getElementById('departmentCountry').value,
                    active: document.getElementById('departmentActive').checked
                };
                
                console.log('üìù Datos del departamento:', departmentData);
                
                const response = await fetch('/agendatce/api/configuration/departments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(departmentData)
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de creaci√≥n:', data);
                
                if (data.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addDepartmentModal'));
                    modal.hide();
                    
                    // Limpiar formulario
                    document.getElementById('addDepartmentForm').reset();
                    
                    // Recargar departamentos
                    loadDepartments();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Departamento creado exitosamente', 'success');
                } else {
                    showAlert('Error al crear departamento: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error guardando departamento:', error);
                showAlert('Error al crear departamento: ' + error.message, 'danger');
            }
        }
        
        // Editar departamento
        async function editDepartment(departmentId) {
            try {
                console.log('‚úèÔ∏è Editando departamento:', departmentId);
                
                // Obtener datos del departamento
                const response = await fetch(`/agendatce/api/configuration/departments/${departmentId}`, {
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Datos del departamento:', data);
                
                if (data.success && data.data) {
                    const department = data.data;
                    
                    // Llenar el modal de edici√≥n
                    document.getElementById('editDepartmentName').value = department.name;
                    document.getElementById('editDepartmentCode').value = department.code;
                    document.getElementById('editDepartmentDescription').value = department.description || '';
                    document.getElementById('editDepartmentActive').checked = department.active;
                    
                    // Guardar el ID del departamento para la actualizaci√≥n
                    window.editingDepartmentId = departmentId;
                    
                    // Mostrar el modal
                    const modal = new bootstrap.Modal(document.getElementById('editDepartmentModal'));
                    modal.show();
                } else {
                    showAlert('Error al cargar datos del departamento: ' + (data.message || 'Error desconocido'), 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error cargando departamento:', error);
                showAlert('Error al cargar datos del departamento: ' + error.message, 'danger');
            }
        }
        
        // Actualizar departamento
        async function updateDepartment() {
            try {
                console.log('üíæ Actualizando departamento:', window.editingDepartmentId);
                
                if (!window.editingDepartmentId) {
                    showAlert('Error: No se ha seleccionado un departamento para editar', 'danger');
                    return;
                }
                
                const departmentData = {
                    name: document.getElementById('editDepartmentName').value,
                    code: document.getElementById('editDepartmentCode').value,
                    description: document.getElementById('editDepartmentDescription').value,
                    active: document.getElementById('editDepartmentActive').checked
                };
                
                console.log('üìù Datos del departamento a actualizar:', departmentData);
                
                const response = await fetch(`/agendatce/api/configuration/departments/${window.editingDepartmentId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(departmentData)
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de actualizaci√≥n:', data);
                
                if (data.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editDepartmentModal'));
                    modal.hide();
                    
                    // Limpiar ID de edici√≥n
                    window.editingDepartmentId = null;
                    
                    // Recargar departamentos
                    loadDepartments();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Departamento actualizado exitosamente', 'success');
                } else {
                    showAlert('Error al actualizar departamento: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error actualizando departamento:', error);
                showAlert('Error al actualizar departamento: ' + error.message, 'danger');
            }
        }
        
        // Eliminar departamento
        async function deleteDepartment(departmentId) {
            try {
                console.log('üóëÔ∏è Eliminando departamento:', departmentId);
                
                // Confirmar eliminaci√≥n
                if (!confirm('¬øEst√°s seguro de que deseas eliminar este departamento? Esta acci√≥n no se puede deshacer.')) {
                    return;
                }
                
                const response = await fetch(`/agendatce/api/configuration/departments/${departmentId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de eliminaci√≥n:', data);
                
                if (data.success) {
                    // Recargar departamentos
                    loadDepartments();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Departamento eliminado exitosamente', 'success');
                } else {
                    showAlert('Error al eliminar departamento: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error eliminando departamento:', error);
                showAlert('Error al eliminar departamento: ' + error.message, 'danger');
            }
        }
        
        // ===== FUNCIONES PARA GESTI√ìN DE ETIQUETAS =====
        
        // Cargar etiquetas
        async function loadTags() {
            try {
                console.log('üè∑Ô∏è Cargando etiquetas...');
                const response = await fetch('/agendatce/api/configuration/tags', {
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    throw new Error(`Error ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('üìä Respuesta de etiquetas:', data);
                
                if (data.success && data.data) {
                    allTags = data.data; // Guardar etiquetas globalmente
                    renderTags(data.data);
                } else {
                    showConfigurationError('Error al cargar etiquetas: ' + (data.message || 'Error desconocido'));
                }
            } catch (error) {
                console.error('‚ùå Error cargando etiquetas:', error);
                showConfigurationError('Error al cargar etiquetas: ' + error.message);
            }
        }
        
        // Renderizar etiquetas
        function renderTags(tags) {
            console.log('üé® Renderizando etiquetas:', tags.length);
            
            const container = document.getElementById('tags-container');
            if (!container) {
                console.log('‚è∞ Container de etiquetas no encontrado, reintentando en 500ms...');
                setTimeout(() => {
                    renderTags(tags);
                }, 500);
                return;
            }
            
            if (!tags || tags.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <p class="text-muted">No hay etiquetas disponibles</p>
                    </div>
                `;
                return;
            }
            
            const tagsHTML = tags.map(tag => `
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h6 class="card-title">
                                <span class="badge" style="background-color: ${tag.color}; color: white; margin-right: 8px;">${tag.display_name}</span>
                                ${tag.name}
                            </h6>
                            <p class="card-text text-muted small">${tag.description || 'Sin descripci√≥n'}</p>
                            <div class="mb-2">
                                <span class="badge bg-secondary me-1">${tag.category || 'Sin categor√≠a'}</span>
                                ${tag.active ? '<span class="badge bg-success">Activo</span>' : '<span class="badge bg-secondary">Inactivo</span>'}
                            </div>
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="btn-group w-100" role="group">
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="editTag('${tag._id}')">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteTag('${tag._id}')">
                                    <i class="fas fa-trash"></i> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = `
                <div class="row">
                    ${tagsHTML}
                </div>
            `;
        }
        
        // Mostrar modal para agregar etiqueta
        function showAddTagModal() {
            console.log('‚ûï Mostrando modal para agregar etiqueta');
            
            // Limpiar formulario
            document.getElementById('tagName').value = '';
            document.getElementById('tagDisplayName').value = '';
            document.getElementById('tagDescription').value = '';
            document.getElementById('tagCategory').value = '';
            document.getElementById('tagColor').value = '#007bff';
            document.getElementById('tagActive').checked = true;
            
            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('addTagModal'));
            modal.show();
        }
        
        // Guardar nueva etiqueta
        async function saveTag() {
            try {
                console.log('üíæ Guardando nueva etiqueta');
                
                const tagData = {
                    name: document.getElementById('tagName').value,
                    display_name: document.getElementById('tagDisplayName').value,
                    description: document.getElementById('tagDescription').value,
                    category: document.getElementById('tagCategory').value,
                    color: document.getElementById('tagColor').value,
                    active: document.getElementById('tagActive').checked
                };
                
                console.log('üìù Datos de la etiqueta:', tagData);
                
                const response = await fetch('/agendatce/api/configuration/tags', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(tagData)
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de creaci√≥n:', data);
                
                if (data.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addTagModal'));
                    modal.hide();
                    
                    // Limpiar formulario
                    document.getElementById('addTagForm').reset();
                    
                    // Recargar etiquetas
                    loadTags();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Etiqueta creada exitosamente', 'success');
                } else {
                    showAlert('Error al crear etiqueta: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error guardando etiqueta:', error);
                showAlert('Error al crear etiqueta: ' + error.message, 'danger');
            }
        }
        
        // Editar etiqueta
        async function editTag(tagId) {
            try {
                console.log('‚úèÔ∏è Editando etiqueta:', tagId);
                
                // Obtener datos de la etiqueta
                const response = await fetch(`/agendatce/api/configuration/tags/${tagId}`, {
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Datos de la etiqueta:', data);
                
                if (data.success && data.data) {
                    const tag = data.data;
                    
                    // Llenar el modal de edici√≥n
                    document.getElementById('editTagName').value = tag.name;
                    document.getElementById('editTagDisplayName').value = tag.display_name;
                    document.getElementById('editTagDescription').value = tag.description || '';
                    document.getElementById('editTagCategory').value = tag.category || '';
                    document.getElementById('editTagColor').value = tag.color || '#007bff';
                    document.getElementById('editTagActive').checked = tag.active;
                    
                    // Guardar el ID de la etiqueta para la actualizaci√≥n
                    window.editingTagId = tagId;
                    
                    // Mostrar el modal
                    const modal = new bootstrap.Modal(document.getElementById('editTagModal'));
                    modal.show();
                } else {
                    showAlert('Error al cargar datos de la etiqueta: ' + (data.message || 'Error desconocido'), 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error cargando etiqueta:', error);
                showAlert('Error al cargar datos de la etiqueta: ' + error.message, 'danger');
            }
        }
        
        // Actualizar etiqueta
        async function updateTag() {
            try {
                console.log('üíæ Actualizando etiqueta:', window.editingTagId);
                
                if (!window.editingTagId) {
                    showAlert('Error: No se ha seleccionado una etiqueta para editar', 'danger');
                    return;
                }
                
                const tagData = {
                    name: document.getElementById('editTagName').value,
                    display_name: document.getElementById('editTagDisplayName').value,
                    description: document.getElementById('editTagDescription').value,
                    category: document.getElementById('editTagCategory').value,
                    color: document.getElementById('editTagColor').value,
                    active: document.getElementById('editTagActive').checked
                };
                
                console.log('üìù Datos de la etiqueta a actualizar:', tagData);
                
                const response = await fetch(`/agendatce/api/configuration/tags/${window.editingTagId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(tagData)
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de actualizaci√≥n:', data);
                
                if (data.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editTagModal'));
                    modal.hide();
                    
                    // Limpiar ID de edici√≥n
                    window.editingTagId = null;
                    
                    // Recargar etiquetas
                    loadTags();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Etiqueta actualizada exitosamente', 'success');
                } else {
                    showAlert('Error al actualizar etiqueta: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error actualizando etiqueta:', error);
                showAlert('Error al actualizar etiqueta: ' + error.message, 'danger');
            }
        }
        
        // Eliminar etiqueta
        async function deleteTag(tagId) {
            try {
                console.log('üóëÔ∏è Eliminando etiqueta:', tagId);
                
                // Confirmar eliminaci√≥n
                if (!confirm('¬øEst√°s seguro de que deseas eliminar esta etiqueta? Esta acci√≥n no se puede deshacer.')) {
                    return;
                }
                
                const response = await fetch(`/agendatce/api/configuration/tags/${tagId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de eliminaci√≥n:', data);
                
                if (data.success) {
                    // Recargar etiquetas
                    loadTags();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Etiqueta eliminada exitosamente', 'success');
                } else {
                    showAlert('Error al eliminar etiqueta: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error eliminando etiqueta:', error);
                showAlert('Error al eliminar etiqueta: ' + error.message, 'danger');
            }
        }
        
        // ===== FUNCIONES PARA GESTI√ìN DE TAREAS =====
        
        // Cargar etiquetas en checkboxes de tareas
        function loadTagsForTaskSelect(modalType) {
            console.log(`üè∑Ô∏è loadTagsForTaskSelect - modalType: ${modalType}, allTags.length: ${allTags.length}`);
            const tagsContainer = document.getElementById(`${modalType}TaskTags`);
            
            if (!tagsContainer) {
                console.error(`‚ùå Container no encontrado: ${modalType}TaskTags`);
                return;
            }
            
            // Limpiar contenedor
            tagsContainer.innerHTML = '';
            
            if (allTags.length === 0) {
                console.log('‚ö†Ô∏è No hay etiquetas disponibles en allTags');
                tagsContainer.innerHTML = '<div class="text-center text-muted">No hay etiquetas disponibles</div>';
                return;
            }
            
            console.log(`‚úÖ Cargando ${allTags.length} etiquetas en el modal ${modalType}`);
            
            // Agregar checkboxes de etiquetas
            allTags.forEach(tag => {
                const checkboxDiv = document.createElement('div');
                checkboxDiv.className = 'form-check mb-2';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'form-check-input';
                checkbox.id = `${modalType}Tag_${tag._id}`;
                checkbox.value = tag._id;
                
                const label = document.createElement('label');
                label.className = 'form-check-label d-flex align-items-center';
                label.htmlFor = `${modalType}Tag_${tag._id}`;
                
                const colorBadge = document.createElement('span');
                colorBadge.className = 'badge me-2';
                colorBadge.style.backgroundColor = tag.color;
                colorBadge.style.color = 'white';
                colorBadge.textContent = tag.display_name;
                
                const nameText = document.createElement('span');
                nameText.textContent = ` (${tag.name})`;
                nameText.className = 'text-muted';
                
                label.appendChild(colorBadge);
                label.appendChild(nameText);
                
                checkboxDiv.appendChild(checkbox);
                checkboxDiv.appendChild(label);
                
                tagsContainer.appendChild(checkboxDiv);
            });
        }
        
        // Filtrar empleados de agenda por departamento
        function filterUsersByDepartment(modalType) {
            const departmentSelect = document.getElementById(`${modalType}TaskDepartment`);
            const usersContainer = document.getElementById(`${modalType}TaskUsers`);
            const selectedDepartment = departmentSelect.value;
            
            console.log('üîç Filtrando EMPLEADOS de agenda por departamento:', selectedDepartment);
            
            // Limpiar contenedor
            usersContainer.innerHTML = '';
            
            if (allEmployees.length === 0) {
                usersContainer.innerHTML = '<div class="text-center text-muted">No hay empleados disponibles</div>';
                return;
            }
            
            let filteredEmployees = allEmployees;
            
            // Si se seleccion√≥ un departamento espec√≠fico para empleados de agenda
            // Los empleados de agenda usan campo 'departamento'
            if (selectedDepartment) {
                filteredEmployees = allEmployees.filter(employee => employee.departamento === selectedDepartment);
                console.log(`üë• Empleados filtrados para departamento ${selectedDepartment}:`, filteredEmployees.length);
            } else {
                console.log('üë• Mostrando todos los empleados (sin departamento):', filteredEmployees.length);
            }
            
            // Agregar checkboxes de empleados
            if (filteredEmployees.length === 0) {
                usersContainer.innerHTML = '<div class="text-center text-muted">No hay empleados en este departamento</div>';
            } else {
                filteredEmployees.forEach(employee => {
                    const checkboxDiv = document.createElement('div');
                    checkboxDiv.className = 'form-check mb-2';
                    
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.className = 'form-check-input';
                    checkbox.id = `${modalType}User_${employee._id}`;
                    checkbox.value = employee._id;
                    
                    const label = document.createElement('label');
                    label.className = 'form-check-label d-flex align-items-center';
                    label.htmlFor = `${modalType}User_${employee._id}`;
                    
                    const avatar = document.createElement('div');
                    avatar.className = 'bg-primary text-white rounded-circle me-2 d-flex align-items-center justify-content-center';
                    avatar.style.width = '32px';
                    avatar.style.height = '32px';
                    avatar.style.fontSize = '12px';
                    avatar.textContent = (employee.name).charAt(0).toUpperCase();
                    
                    const userInfo = document.createElement('div');
                    userInfo.innerHTML = `
                        <div class="fw-medium">${employee.name}</div>
                        <small class="text-muted">${employee.cargo || 'Sin cargo'}</small>
                    `;
                    
                    label.appendChild(avatar);
                    label.appendChild(userInfo);
                    
                    checkboxDiv.appendChild(checkbox);
                    checkboxDiv.appendChild(label);
                    
                    usersContainer.appendChild(checkboxDiv);
                });
            }
        }
        
        // Mostrar modal para agregar tarea
        async function showAddTaskModal() {
            console.log('‚ûï Mostrando modal para agregar tarea');
            
            // Limpiar formulario completamente
            document.getElementById('addTaskTitle').value = '';
            document.getElementById('addTaskDescription').value = '';
            document.getElementById('addTaskMode').value = 'binary';
            document.getElementById('addTaskPeriodicity').value = 'daily';
            document.getElementById('addTaskTarget').value = '1';
            document.getElementById('addTaskSLA').value = '';
            document.getElementById('addTaskEvidence').checked = false;
            document.getElementById('addTaskDepartment').value = '';
            
            // Limpiar contenedores de empleados y etiquetas
            document.getElementById('addTaskUsers').innerHTML = '<div class="text-center text-muted">Cargando empleados...</div>';
            document.getElementById('addTaskTags').innerHTML = '<div class="text-center text-muted">Cargando etiquetas...</div>';
            
            // ‚úÖ CAMBIO PRINCIPAL: Asegurar que los EMPLEADOS DE AGENDA est√©n cargados
            if (allEmployees.length === 0) {
                console.log('üë• Cargando empleados de agenda antes de abrir modal de creaci√≥n');
                await loadEmployeesForTaskModals();
            }
            
            // Asegurar que las etiquetas est√©n cargadas
            if (allTags.length === 0) {
                console.log('üè∑Ô∏è Cargando etiquetas antes de abrir modal de creaci√≥n');
                await loadTags();
            }
            
            // Cargar todos los empleados inicialmente (sin departamento)
            filterUsersByDepartment('add');
            
            // Cargar etiquetas
            loadTagsForTaskSelect('add');
            
            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('addTaskModal'));
            modal.show();
        }
        
        // Guardar nueva tarea
        async function saveTask() {
            try {
                console.log('üíæ Guardando nueva tarea');
                
                // Obtener usuarios asignados de checkboxes
                const userCheckboxes = document.querySelectorAll('#addTaskUsers input[type="checkbox"]:checked');
                const assignedUsers = Array.from(userCheckboxes).map(checkbox => checkbox.value);
                
                // Validar que se hayan seleccionado usuarios
                if (assignedUsers.length === 0) {
                    showAlert('Debes seleccionar al menos un usuario para asignar la tarea', 'warning');
                    return;
                }
                
                // Obtener etiquetas seleccionadas de checkboxes
                const tagCheckboxes = document.querySelectorAll('#addTaskTags input[type="checkbox"]:checked');
                const selectedTags = Array.from(tagCheckboxes).map(checkbox => checkbox.value);
                
                const taskData = {
                    title: document.getElementById('addTaskTitle').value,
                    description: document.getElementById('addTaskDescription').value,
                    mode: document.getElementById('addTaskMode').value,
                    periodicity: document.getElementById('addTaskPeriodicity').value,
                    target_per_period: parseInt(document.getElementById('addTaskTarget').value) || 1,
                    sla_time: document.getElementById('addTaskSLA').value || null,
                    requires_evidence: document.getElementById('addTaskEvidence').checked,
                    department: document.getElementById('addTaskDepartment').value || null,
                    assigned_users: assignedUsers,
                    specific_days: [], // Por ahora vac√≠o, se puede expandir
                    tags: selectedTags
                };
                
                console.log('üìù Datos de la tarea:', taskData);
                
                const response = await fetch('/agendatce/api/configuration/tasks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(taskData)
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de creaci√≥n:', data);
                
                if (data.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addTaskModal'));
                    modal.hide();
                    
                    // Recargar tareas
                    loadTasks();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Tarea creada exitosamente', 'success');
                } else {
                    showAlert('Error al crear tarea: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error guardando tarea:', error);
                showAlert('Error al crear tarea: ' + error.message, 'danger');
            }
        }
        
        // Editar tarea
        async function editTask(taskId) {
            try {
                console.log('‚úèÔ∏è Editando tarea:', taskId);
                
                // Obtener datos de la tarea
                const response = await fetch(`/agendatce/api/configuration/tasks/${taskId}`, {
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Datos de la tarea:', data);
                
                if (data.success && data.data) {
                    const task = data.data;
                    
                    // Llenar el modal de edici√≥n
                    document.getElementById('editTaskTitle').value = task.title;
                    document.getElementById('editTaskDescription').value = task.description || '';
                    document.getElementById('editTaskMode').value = task.mode;
                    document.getElementById('editTaskPeriodicity').value = task.periodicity;
                    document.getElementById('editTaskTarget').value = task.target_per_period || 1;
                    document.getElementById('editTaskSLA').value = task.sla_time || '';
                    document.getElementById('editTaskEvidence').checked = task.requires_evidence || false;
                    document.getElementById('editTaskDepartment').value = task.department || '';
                    
                    // Limpiar contenedores primero
                    document.getElementById('editTaskUsers').innerHTML = '<div class="text-center text-muted">Cargando empleados...</div>';
                    document.getElementById('editTaskTags').innerHTML = '<div class="text-center text-muted">Cargando etiquetas...</div>';
                    
                    // ‚úÖ CAMBIO: Asegurar que los EMPLEADOS DE AGENDA est√©n cargados
                    if (allEmployees.length === 0) {
                        console.log('üë• Cargando empleados de agenda antes de abrir modal de edici√≥n');
                        await loadEmployeesForTaskModals();
                    }
                    
                    // Asegurar que las etiquetas est√©n cargadas
                    if (allTags.length === 0) {
                        console.log('üè∑Ô∏è Cargando etiquetas antes de abrir modal de edici√≥n');
                        await loadTags();
                    }
                    
                    // Cargar usuarios filtrados por departamento
                    filterUsersByDepartment('edit');
                    
                    // Cargar etiquetas
                    loadTagsForTaskSelect('edit');
                    
                    // Seleccionar usuarios asignados
                    if (task.assigned_users && task.assigned_users.length > 0) {
                        setTimeout(() => {
                            task.assigned_users.forEach(userId => {
                                const checkbox = document.querySelector(`#editUser_${userId}`);
                                if (checkbox) {
                                    checkbox.checked = true;
                                }
                            });
                        }, 300);
                    }
                    
                    // Seleccionar etiquetas asignadas
                    if (task.tags && task.tags.length > 0) {
                        console.log(`üè∑Ô∏è Seleccionando etiquetas asignadas:`, task.tags);
                        setTimeout(() => {
                            task.tags.forEach(tagId => {
                                const checkbox = document.querySelector(`#editTag_${tagId}`);
                                if (checkbox) {
                                    checkbox.checked = true;
                                    console.log(`‚úÖ Etiqueta seleccionada: ${tagId}`);
                                } else {
                                    console.log(`‚ùå Checkbox no encontrado para etiqueta: ${tagId}`);
                                }
                            });
                        }, 300);
                    } else {
                        console.log('‚ö†Ô∏è No hay etiquetas asignadas a esta tarea');
                    }
                    
                    // Guardar el ID de la tarea para la actualizaci√≥n
                    window.editingTaskId = taskId;
                    
                    // Mostrar el modal
                    const modal = new bootstrap.Modal(document.getElementById('editTaskModal'));
                    modal.show();
                } else {
                    showAlert('Error al cargar datos de la tarea: ' + (data.message || 'Error desconocido'), 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error cargando tarea:', error);
                showAlert('Error al cargar datos de la tarea: ' + error.message, 'danger');
            }
        }
        
        // Actualizar tarea
        async function updateTask() {
            try {
                console.log('üíæ Actualizando tarea:', window.editingTaskId);
                
                if (!window.editingTaskId) {
                    showAlert('Error: No se ha seleccionado una tarea para editar', 'danger');
                    return;
                }
                
                // Obtener usuarios asignados de checkboxes
                const userCheckboxes = document.querySelectorAll('#editTaskUsers input[type="checkbox"]:checked');
                const assignedUsers = Array.from(userCheckboxes).map(checkbox => checkbox.value);
                
                // Validar que se hayan seleccionado usuarios
                if (assignedUsers.length === 0) {
                    showAlert('Debes seleccionar al menos un usuario para asignar la tarea', 'warning');
                    return;
                }
                
                // Obtener etiquetas seleccionadas de checkboxes
                const tagCheckboxes = document.querySelectorAll('#editTaskTags input[type="checkbox"]:checked');
                const selectedTags = Array.from(tagCheckboxes).map(checkbox => checkbox.value);
                
                const taskData = {
                    title: document.getElementById('editTaskTitle').value,
                    description: document.getElementById('editTaskDescription').value,
                    mode: document.getElementById('editTaskMode').value,
                    periodicity: document.getElementById('editTaskPeriodicity').value,
                    target_per_period: parseInt(document.getElementById('editTaskTarget').value) || 1,
                    sla_time: document.getElementById('editTaskSLA').value || null,
                    requires_evidence: document.getElementById('editTaskEvidence').checked,
                    department: document.getElementById('editTaskDepartment').value || null,
                    assigned_users: assignedUsers,
                    specific_days: [], // Por ahora vac√≠o, se puede expandir
                    tags: selectedTags
                };
                
                console.log('üìù Datos de la tarea a actualizar:', taskData);
                
                const response = await fetch(`/agendatce/api/configuration/tasks/${window.editingTaskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify(taskData)
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de actualizaci√≥n:', data);
                
                if (data.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editTaskModal'));
                    modal.hide();
                    
                    // Limpiar ID de edici√≥n
                    window.editingTaskId = null;
                    
                    // Recargar tareas
                    loadTasks();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Tarea actualizada exitosamente', 'success');
                } else {
                    showAlert('Error al actualizar tarea: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error actualizando tarea:', error);
                showAlert('Error al actualizar tarea: ' + error.message, 'danger');
            }
        }
        
        // Eliminar tarea
        async function deleteTask(taskId) {
            try {
                console.log('üóëÔ∏è Eliminando tarea:', taskId);
                
                // Confirmar eliminaci√≥n
                if (!confirm('¬øEst√°s seguro de que deseas eliminar esta tarea? Esta acci√≥n no se puede deshacer.')) {
                    return;
                }
                
                const response = await fetch(`/agendatce/api/configuration/tasks/${taskId}`, {
                    method: 'DELETE',
                    credentials: 'include'
                });
                
                const data = await response.json();
                console.log('üìä Respuesta de eliminaci√≥n:', data);
                
                if (data.success) {
                    // Recargar tareas
                    loadTasks();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Tarea eliminada exitosamente', 'success');
                } else {
                    showAlert('Error al eliminar tarea: ' + data.message, 'danger');
                }
            } catch (error) {
                console.error('‚ùå Error eliminando tarea:', error);
                showAlert('Error al eliminar tarea: ' + error.message, 'danger');
            }
        }
        
        // Renderizar tareas
        function renderTasks(tasks) {
            console.log('üé® Renderizando tareas:', tasks.length);
            
            const container = document.getElementById('tasksContainer');
            if (!container) {
                console.log('‚è∞ Container no encontrado, reintentando en 200ms...');
                    setTimeout(() => {
                        loadTasks();
                    }, 200);
                return;
            }
            
            if (!tasks || tasks.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-4">
                        <p class="text-muted">No hay tareas disponibles</p>
                    </div>
                `;
                return;
            }
            
            const tasksHTML = tasks.map(task => {
                const modeText = task.mode === 'binary' ? 'Binaria' : 'Contador';
                const periodicityText = {
                    'daily': 'Diaria',
                    'weekly': 'Semanal',
                    'monthly': 'Mensual',
                    'monThu': 'Lun/Jue',
                    'biweekly': 'Quincenal'
                }[task.periodicity] || task.periodicity;
                
                // Obtener nombres de empleados asignados
                let assignedUsersText = 'Sin empleados asignados';
                if (task.assigned_users && task.assigned_users.length > 0 && Array.isArray(allEmployees)) {
                    const assignedUserNames = task.assigned_users.map(userId => {
                        const employee = allEmployees.find(e => e._id === userId);
                        return employee ? employee.name : 'Empleado no encontrado';
                    });
                    assignedUsersText = `Asignada a: ${assignedUserNames.join(', ')}`;
                } else if (task.assigned_users && task.assigned_users.length > 0) {
                    assignedUsersText = `Asignada a: ${task.assigned_users.length} usuario(s)`;
                }
                
                // Obtener etiquetas de la tarea
                let tagsHTML = '';
                if (task.tags && task.tags.length > 0) {
                    const taskTags = task.tags.map(tagId => {
                        const tag = allTags.find(t => t._id === tagId);
                        return tag ? `<span class="badge me-1" style="background-color: ${tag.color}; color: white;">${tag.display_name}</span>` : '';
                    }).filter(tag => tag !== '');
                    tagsHTML = `<div class="mb-2">${taskTags.join('')}</div>`;
                }
                
                return `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="card h-100">
                            <div class="card-body">
                                <h6 class="card-title">${task.title}</h6>
                                <p class="card-text text-muted small">${task.description || 'Sin descripci√≥n'}</p>
                                <div class="mb-2">
                                    <span class="badge bg-primary me-1">${modeText}</span>
                                    <span class="badge bg-secondary me-1">${periodicityText}</span>
                                    ${task.requires_evidence ? '<span class="badge bg-warning">Evidencia</span>' : ''}
                                </div>
                                ${tagsHTML}
                                <p class="small text-info mb-1">${assignedUsersText}</p>
                                ${task.sla_time ? `<p class="small text-muted mb-1">SLA: ${task.sla_time}</p>` : ''}
                                ${task.target_per_period > 1 ? `<p class="small text-muted mb-1">Meta: ${task.target_per_period}</p>` : ''}
                            </div>
                            <div class="card-footer bg-transparent">
                                <div class="btn-group w-100" role="group">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="editTask('${task._id}')">
                                        <i class="fas fa-edit"></i> Editar
                                    </button>
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteTask('${task._id}')">
                                        <i class="fas fa-trash"></i> Eliminar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            container.innerHTML = `
                <div class="row">
                    ${tasksHTML}
                </div>
            `;
        }
        
        // Modificar la funci√≥n loadSection para cargar configuraci√≥n
        const originalLoadSection = loadSection;
        loadSection = function(sectionName) {
            originalLoadSection(sectionName);
            
            // Si se carga configuraci√≥n, cargar datos despu√©s de un peque√±o delay
            if (sectionName === 'configuration') {
                setTimeout(() => {
                    console.log('üîß Inicializando configuraci√≥n...');
                    
                    // Inicializar tabs de Bootstrap
                    const tabTriggerList = [].slice.call(document.querySelectorAll('#configTabs button[data-bs-toggle="tab"]'));
                    tabTriggerList.forEach(function (tabTriggerEl) {
                        new bootstrap.Tab(tabTriggerEl);
                    });
                    
                    // Asegurar que el primer tab est√© activo
                    const firstTab = document.querySelector('#employees-tab');
                    if (firstTab) {
                        firstTab.classList.add('active');
                        const firstTabPane = document.querySelector('#employees');
                        if (firstTabPane) {
                            firstTabPane.classList.add('show', 'active');
                        }
                    }
                    
                    loadConfigurationData();
                }, 1000);
            }
        };

        // ========================================
        // FUNCIONES PARA COMPLETAR TAREAS
        // ========================================
        
        // Funci√≥n para completar tarea (binaria)
        function completeTask(taskId) {
            console.log('üîç Completando tarea:', taskId);
            console.log('üìä window.todayTasksData:', window.todayTasksData);
            console.log('üìä Tipo de todayTasksData:', typeof window.todayTasksData);
            console.log('üìä Es array:', Array.isArray(window.todayTasksData));
            console.log('üìä Longitud:', window.todayTasksData?.length);
            
            if (!window.todayTasksData || !Array.isArray(window.todayTasksData)) {
                console.error('‚ùå todayTasksData no est√° disponible o no es un array');
                showAlert('Error: No se pudieron cargar las tareas', 'danger');
                return;
            }
            
            // Buscar la tarea en el array de tareas de hoy
            const task = window.todayTasksData.find(t => {
                console.log('üîç Comparando:', t._id, 'con', taskId);
                return t._id === taskId;
            });
            
            if (!task) {
                console.error('‚ùå Tarea no encontrada. ID buscado:', taskId);
                console.log('üìã IDs disponibles:', window.todayTasksData.map(t => t._id));
                showAlert('Tarea no encontrada', 'danger');
                return;
            }
            
            console.log('‚úÖ Tarea encontrada:', task.title);
            
            // Configurar el modal de completar tarea
            document.getElementById('completeTaskTitle').textContent = task.title;
            document.getElementById('completeTaskId').value = taskId;
            document.getElementById('completeTaskComment').value = '';
            document.getElementById('completeTaskEvidence').files = null;
            
            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('completeTaskModal'));
            modal.show();
        }

        // Funci√≥n para registrar acci√≥n (tarea contable)
        function registerTaskAction(taskId) {
            console.log('üîç Registrando acci√≥n para tarea contable:', taskId);
            console.log('üìä window.todayTasksData:', window.todayTasksData);
            console.log('üìä Tipo de todayTasksData:', typeof window.todayTasksData);
            console.log('üìä Es array:', Array.isArray(window.todayTasksData));
            console.log('üìä Longitud:', window.todayTasksData?.length);
            
            if (!window.todayTasksData || !Array.isArray(window.todayTasksData)) {
                console.error('‚ùå todayTasksData no est√° disponible o no es un array');
                showAlert('Error: No se pudieron cargar las tareas', 'danger');
                return;
            }
            
            // Buscar la tarea en el array de tareas de hoy
            const task = window.todayTasksData.find(t => {
                console.log('üîç Comparando:', t._id, 'con', taskId);
                return t._id === taskId;
            });
            
            if (!task) {
                console.error('‚ùå Tarea no encontrada. ID buscado:', taskId);
                console.log('üìã IDs disponibles:', window.todayTasksData.map(t => t._id));
                showAlert('Tarea no encontrada', 'danger');
                return;
            }
            
            console.log('‚úÖ Tarea encontrada:', task.title);
            
            // Configurar el modal de registrar acci√≥n
            document.getElementById('registerActionTitle').textContent = task.title;
            document.getElementById('registerActionId').value = taskId;
            document.getElementById('registerActionComment').value = '';
            document.getElementById('registerActionEvidence').files = null;
            
            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('registerActionModal'));
            modal.show();
        }

        // Funci√≥n para confirmar completado de tarea (binaria)
        async function confirmCompleteTask() {
            try {
                const taskId = document.getElementById('completeTaskId').value;
                const comment = document.getElementById('completeTaskComment').value;
                const evidenceFile = document.getElementById('completeTaskEvidence').files[0];
                
                console.log('‚úÖ Confirmando completado de tarea:', { taskId, comment, hasFile: !!evidenceFile });
                
                // Manejar tareas atrasadas que ya tienen prefijo 'overdue_'
                let assignmentId;
                if (taskId.startsWith('overdue_')) {
                    assignmentId = taskId; // Ya tiene el formato correcto
                } else if (taskId.includes('_')) {
                    // Si el taskId ya contiene el ID del usuario, usarlo tal como est√°
                    assignmentId = `virtual_${taskId}`;
                } else {
                    // Si es solo el ID de la tarea, agregar el ID del usuario
                    assignmentId = `virtual_${taskId}_${currentUser._id}`;
                }
                
                console.log('üì§ Uploading evidence file:', !!evidenceFile);
                
                // Subir evidencia si existe
                let evidenceUrl = null;
                if (evidenceFile) {
                    console.log('üì§ Subiendo evidencia...');
                    try {
                        evidenceUrl = await subirUnaImagen(evidenceFile);
                        console.log('‚úÖ Evidencia subida:', evidenceUrl);
                    } catch (error) {
                        console.error('‚ùå Error subiendo evidencia:', error);
                        showAlert('Error subiendo evidencia: ' + error, 'warning');
                        return;
                    }
                }
                
                // Crear datos para enviar
                const requestData = {
                    assignment_id: assignmentId,
                    action_type: 'completed',
                    value: '1',
                    comment: comment || 'Tarea completada'
                };
                
                // Agregar URL de evidencia si existe
                if (evidenceUrl) {
                    requestData.evidence_url = evidenceUrl;
                    console.log('üìé Enviando URL de evidencia:', evidenceUrl);
                    console.log('üîó DATOS COMPLETOS A ENVIAR:', requestData);
                }
                
                const response = await fetch('/agendatce/api/tasks/log', {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });
                
                const result = await response.json();
                console.log('üìä Resultado del completado:', result);
                
                if (result.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('completeTaskModal'));
                    modal.hide();
                    
                    // Mostrar mensaje de √©xito
                    showAlert('Tarea completada exitosamente', 'success');
                    
                    // Recargar tareas de hoy
                    if (typeof loadTodayData === 'function') {
                        await loadTodayData();
                    }
                } else {
                    showAlert('Error al completar tarea: ' + result.message, 'danger');
                }
                
            } catch (error) {
                console.error('‚ùå Error completando tarea:', error);
                showAlert('Error al completar tarea: ' + error.message, 'danger');
            }
        }

        // Funci√≥n para confirmar registro de acci√≥n (tareas contables)
        async function confirmRegisterAction() {
            try {
                const taskId = document.getElementById('registerActionId').value;
                const value = parseInt(document.getElementById('registerActionValue').value);
                const comment = document.getElementById('registerActionComment').value;
                const evidenceFile = document.getElementById('registerActionEvidence').files[0];
                
                if (!value || value < 1) {
                    showAlert('Debes ingresar una cantidad v√°lida', 'warning');
                    return;
                }
                
                console.log('‚úÖ Registrando acci√≥n:', { taskId, value, comment, hasFile: !!evidenceFile });
                
               
                // Manejar tareas atrasadas que ya tienen prefijo 'overdue_'
                let assignmentId;
                if (taskId.startsWith('overdue_')) {
                    assignmentId = taskId; // Ya tiene el formato correcto
                } else if (taskId.includes('_')) {
                    // Si el taskId ya contiene el ID del usuario, usarlo tal como est√°
                    assignmentId = `virtual_${taskId}`;
                } else {
                    // Si es solo el ID de la tarea, agregar el ID del usuario
                    assignmentId = `virtual_${taskId}_${currentUser._id}`;
                }
                
                
                // Subir evidencia si existe
                let evidenceUrl = null;
                if (evidenceFile) {
                    console.log('üì§ Subiendo evidencia para registro...');
                    try {
                        evidenceUrl = await subirUnaImagen(evidenceFile);
                        console.log('‚úÖ Evidencia subida:', evidenceUrl);
                    } catch (error) {
                        console.error('‚ùå Error subiendo evidencia:', error);
                        showAlert('Error subiendo evidencia: ' + error, 'warning');
                        return;
                    }
                }
                
                // Crear datos para enviar
                const requestData = {
                    assignment_id: assignmentId,
                    value: value.toString(),
                    comment: comment || 'Acci√≥n registrada'
                };
                
                // Agregar URL de evidencia si existe
                if (evidenceUrl) {
                    requestData.evidence_url = evidenceUrl;
                    console.log('üìé Enviando URL de evidencia:', evidenceUrl);
                    console.log('üîó DATOS COMPLETOS A ENVIAR:', requestData);
                }
                
                const response = await fetch('/agendatce/api/tasks/register-action', {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });
                
                const result = await response.json();
                console.log('üìä Resultado del registro:', result);
                
                if (result.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('registerActionModal'));
                    modal.hide();
                    
                    // Mostrar mensaje de √©xito
                    showAlert(`Acci√≥n registrada exitosamente: ${value} unidad${value > 1 ? 'es' : ''}`, 'success');
                    
                    // Recargar tareas de hoy
                    if (typeof loadTodayData === 'function') {
                        await loadTodayData();
                    }
                } else {
                    showAlert('Error al registrar acci√≥n: ' + result.message, 'danger');
                }
                
            } catch (error) {
                console.error('‚ùå Error registrando acci√≥n:', error);
                showAlert('Error al registrar acci√≥n: ' + error.message, 'danger');
            }
        }

        // ========================================
        // FUNCIONES PARA TAREAS ATRASADAS
        // ========================================

        // Opci√≥n A: Completar todas las tareas atrasadas
        function showCompleteAllOverdueModal() {
            const overdueTasks = (window.todayTasksData || []).filter(task => task.assignment_type === 'overdue');
            
            if (overdueTasks.length === 0) {
                showAlert('No hay tareas atrasadas para completar', 'info');
                return;
            }

            // Llenar la lista de tareas atrasadas
            const overdueList = document.getElementById('overdueTasksList');
            overdueList.innerHTML = overdueTasks.map(task => `
                <div class="alert alert-warning mb-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>${task.title}</strong>
                            <br>
                            <small class="text-muted">${task.description}</small>
                            <br>
                            <small class="text-danger">
                                <i class="fas fa-calendar-times me-1"></i>
                                Atrasos: ${task.overdue_days ? task.overdue_days.map(day => day.dateStr).join(', ') : 'N/A'}
                            </small>
                        </div>
                        <span class="badge bg-${task.mode === 'binary' ? 'primary' : 'info'}">${task.mode === 'binary' ? 'Binaria' : 'Contable'}</span>
                    </div>
                </div>
            `).join('');

            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('completeAllOverdueModal'));
            modal.show();
        }

        async function confirmCompleteAllOverdue() {
            try {
                const overdueTasks = (window.todayTasksData || []).filter(task => task.assignment_type === 'overdue');
                const comment = document.getElementById('bulkCompletionComment').value;

                if (overdueTasks.length === 0) {
                    showAlert('No hay tareas atrasadas para completar', 'info');
                    return;
                }

                let completedCount = 0;
                let errorCount = 0;

                for (const task of overdueTasks) {
                    try {
                        // Crear JSON para cada tarea
                        const response = await fetch('/agendatce/api/tasks/complete-all-overdue', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                assignment_id: task._id,
                                comment: comment || `Completado masivamente - ${new Date().toLocaleString()}`
                            }),
                            credentials: 'include'
                        });

                        const result = await response.json();
                        
                        if (result.success) {
                            completedCount++;
                        } else {
                            errorCount++;
                            console.error(`Error completando tarea ${task.title}:`, result.message);
                        }
                    } catch (error) {
                        errorCount++;
                        console.error(`Error completando tarea ${task.title}:`, error);
                    }
                }

                // Cerrar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('completeAllOverdueModal'));
                modal.hide();

                // Mostrar resultado
                if (completedCount > 0) {
                    showAlert(`‚úÖ Se completaron ${completedCount} tareas atrasadas${errorCount > 0 ? `, ${errorCount} con errores` : ''}`, 'success');
                    
                    // Recargar tareas de hoy
                    if (typeof window.loadTodayData === 'function') {
                        await window.loadTodayData();
                    }
                } else {
                    showAlert('‚ùå No se pudo completar ninguna tarea atrasada', 'danger');
                }

            } catch (error) {
                console.error('‚ùå Error en completaci√≥n masiva:', error);
                showAlert('Error al completar tareas atrasadas: ' + error.message, 'danger');
            }
        }

        // Opci√≥n C: Completar con fecha retroactiva
        function showRetroactiveCompletion(taskId) {
            // Buscar la tarea
            const task = (window.todayTasksData || []).find(t => t._id === taskId);
            if (!task) {
                showAlert('Tarea no encontrada', 'danger');
                return;
            }

            // Configurar el modal
            document.getElementById('retroactiveTaskId').value = taskId;
            document.getElementById('retroactiveComment').value = '';
            document.getElementById('retroactiveEvidence').files = null;

            // Establecer la fecha por defecto (hoy)
            document.getElementById('retroactiveDate').value = new Date().toISOString().split('T')[0];

            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('retroactiveCompletionModal'));
            modal.show();
        }

        async function confirmRetroactiveCompletion() {
            try {
                const taskId = document.getElementById('retroactiveTaskId').value;
                const comment = document.getElementById('retroactiveComment').value;

                console.log('üîç confirmRetroactiveCompletion:', { taskId, comment });

                const response = await fetch('/agendatce/api/tasks/complete-all-overdue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        assignment_id: taskId,
                        comment: comment || 'Tarea completada'
                    }),
                    credentials: 'include'
                });

                const result = await response.json();

                if (result.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('retroactiveCompletionModal'));
                    modal.hide();

                    // Mostrar mensaje de √©xito
                    showAlert(`‚úÖ Tarea completada exitosamente`, 'success');

                    // Recargar tareas de hoy
                    if (typeof window.loadTodayData === 'function') {
                        await window.loadTodayData();
                    }
                } else {
                    showAlert('Error al completar tarea retroactivamente: ' + result.message, 'danger');
                }

            } catch (error) {
                console.error('‚ùå Error en completaci√≥n retroactiva:', error);
                showAlert('Error al completar tarea retroactivamente: ' + error.message, 'danger');
            }
        }

        // Opci√≥n D: Marcar como No Aplicable
        function showNotApplicable(taskId) {
            // Buscar la tarea
            const task = (window.todayTasksData || []).find(t => t._id === taskId);
            if (!task) {
                showAlert('Tarea no encontrada', 'danger');
                return;
            }

            // Configurar el modal
            document.getElementById('notApplicableTaskId').value = taskId;
            document.getElementById('notApplicableReason').value = '';

            // Mostrar las fechas atrasadas
            if (task.overdue_days && task.overdue_days.length > 0) {
                const datesStr = task.overdue_days.map(day => day.dateStr).join(', ');
                document.getElementById('notApplicableDateDisplay').value = datesStr;
            } else {
                document.getElementById('notApplicableDateDisplay').value = 'No especificado';
            }

            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('notApplicableModal'));
            modal.show();
        }

        async function confirmNotApplicable() {
            try {
                const taskId = document.getElementById('notApplicableTaskId').value;
                const reason = document.getElementById('notApplicableReason').value;

                console.log('üîç confirmNotApplicable:', { taskId, reason });

                const response = await fetch('/agendatce/api/tasks/not-applicable', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        assignment_id: taskId,
                        reason: reason || 'Marcada como no aplicable'
                    }),
                    credentials: 'include'
                });

                const result = await response.json();

                if (result.success) {
                    // Cerrar modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('notApplicableModal'));
                    modal.hide();

                    // Mostrar mensaje de √©xito
                    showAlert('‚úÖ Tarea marcada como no aplicable', 'success');

                    // Recargar tareas de hoy
                    if (typeof window.loadTodayData === 'function') {
                        await window.loadTodayData();
                    }
                } else {
                    showAlert('Error al marcar tarea como no aplicable: ' + result.message, 'danger');
                }

            } catch (error) {
                console.error('‚ùå Error marcando como no aplicable:', error);
                showAlert('Error al marcar tarea como no aplicable: ' + error.message, 'danger');
            }
        }

        // Funci√≥n para mostrar/ocultar el bot√≥n de completar todas las atrasadas
        function updateCompleteAllOverdueButton() {
            const overdueTasks = (window.todayTasksData || []).filter(task => task.assignment_type === 'overdue');
            const buttonGroup = document.getElementById('overdueActionsBtn');
            
            if (buttonGroup) {
                if (overdueTasks.length > 0) {
                    buttonGroup.style.display = 'inline-block';
                    // Actualizar texto de los botones con el conteo
                    document.getElementById('completeAllOverdueBtn').innerHTML = `<i class="fas fa-clock me-1"></i>Completar (${overdueTasks.length})`;
                    document.getElementById('skipAllOverdueBtn').innerHTML = `<i class="fas fa-forward me-1"></i>Saltar (${overdueTasks.length})`;
                } else {
                    buttonGroup.style.display = 'none';
                }
            }
        }

        // Funci√≥n para mostrar el modal de saltar todas las tareas atrasadas
        function showSkipAllOverdueModal() {
            const overdueTasks = (window.todayTasksData || []).filter(task => task.assignment_type === 'overdue');
            
            if (overdueTasks.length === 0) {
                showAlert('No hay tareas atrasadas para saltar', 'info');
                return;
            }

            // Llenar la lista de tareas atrasadas
            const skipList = document.getElementById('skipOverdueTasksList');
            skipList.innerHTML = overdueTasks.map(task => `
                <div class="alert alert-secondary mb-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong>${task.title}</strong>
                            <br>
                            <small class="text-muted">
                                ${task.mode === 'binary' ? 'Tarea Binaria' : 'Tarea Contable'}
                                ${task.overdue_days && task.overdue_days.length > 0 ? 
                                    ` ‚Ä¢ Atrasos: ${task.overdue_days.map(day => day.dateStr).join(', ')}` : 
                                    ''
                                }
                            </small>
                        </div>
                        <span class="badge bg-${task.mode === 'binary' ? 'primary' : 'info'}">${task.mode === 'binary' ? 'Binaria' : 'Contable'}</span>
                    </div>
                </div>
            `).join('');

            // Limpiar el campo de raz√≥n
            document.getElementById('bulkSkipReason').value = '';

            // Mostrar modal
            const modal = new bootstrap.Modal(document.getElementById('skipAllOverdueModal'));
            modal.show();
        }

        // Funci√≥n para confirmar el salto de todas las tareas atrasadas
        async function confirmSkipAllOverdue() {
            try {
                const overdueTasks = (window.todayTasksData || []).filter(task => task.assignment_type === 'overdue');
                const reason = document.getElementById('bulkSkipReason').value;

                if (!reason.trim()) {
                    showAlert('Por favor proporciona una raz√≥n para saltar las tareas', 'warning');
                    return;
                }

                if (overdueTasks.length === 0) {
                    showAlert('No hay tareas atrasadas para saltar', 'info');
                    return;
                }

                let skippedCount = 0;
                let errorCount = 0;

                // Procesar cada tarea atrasada
                for (const task of overdueTasks) {
                    try {
                        // Determinar el assignment_id correcto
                        let assignmentId;
                        if (task._id.startsWith('overdue_')) {
                            assignmentId = task._id;
                        } else {
                            assignmentId = `virtual_${task._id}_${currentUser._id}`;
                        }

                        const response = await fetch('/agendatce/api/tasks/skip-all-overdue', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                assignment_id: assignmentId,
                                reason: reason
                            }),
                            credentials: 'include'
                        });

                        const result = await response.json();

                        if (result.success) {
                            skippedCount++;
                        } else {
                            errorCount++;
                            console.error('Error al saltar tarea:', result.message);
                        }
                    } catch (error) {
                        errorCount++;
                        console.error('Error al saltar tarea:', error);
                    }
                }

                // Cerrar modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('skipAllOverdueModal'));
                modal.hide();

                // Mostrar resultado
                if (skippedCount > 0) {
                    showAlert(`‚úÖ Se saltaron ${skippedCount} tareas atrasadas${errorCount > 0 ? `, ${errorCount} con errores` : ''}`, 'success');
                    
                    // Recargar tareas de hoy
                    if (typeof window.loadTodayData === 'function') {
                        await window.loadTodayData();
                    }
                } else {
                    showAlert('‚ùå No se pudo saltar ninguna tarea', 'danger');
                }

            } catch (error) {
                console.error('Error al saltar tareas atrasadas:', error);
                showAlert('Error al saltar tareas atrasadas: ' + error.message, 'danger');
            }
        }

        // Inicializar b√∫squeda de usuarios cuando el DOM est√© listo
        document.addEventListener('DOMContentLoaded', function() {
            // Agregar event listener para b√∫squeda en tiempo real
            const userSearchInput = document.getElementById('userSearchInput');
            if (userSearchInput) {
                userSearchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase().trim();
                    
                    // Si no hay t√©rmino de b√∫squeda, mostrar todos los usuarios
                    if (searchTerm.length === 0) {
                        displayUserResults(allSystemUsers);
                        return;
                    }
                    
                    // Filtrar usuarios
                    filteredUsers = allSystemUsers.filter(user => 
                        user.name.toLowerCase().includes(searchTerm) || 
                        user.correo.toLowerCase().includes(searchTerm)
                    );
                    
                   
                    
                    // Mostrar resultados
                    displayUserResults(filteredUsers);
                });
            }
        });
    </script>

    <!-- Modal de b√∫squeda de usuarios -->
    <div class="modal fade" id="userSearchModal" tabindex="-1" aria-labelledby="userSearchModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="userSearchModalLabel">
              <i class="fas fa-search me-2"></i>
              Buscar Usuario del Sistema
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="mb-3">
              <label for="userSearchInput" class="form-label">Buscar por nombre o correo:</label>
              <input type="text" class="form-control" id="userSearchInput" placeholder="Escribe para buscar usuarios...">
            </div>
            
            <div class="mb-3">
              <div class="d-flex justify-content-between align-items-center">
                <span class="text-muted">Resultados de b√∫squeda:</span>
                <span class="badge bg-secondary" id="userSearchCount">0 usuarios</span>
              </div>
            </div>
            
            <div id="userSearchResults" style="max-height: 400px; overflow-y: auto;">
              <div class="text-center text-muted py-4">
                <i class="fas fa-spinner fa-spin fa-2x mb-2"></i>
                <p>Cargando usuarios...</p>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
            <button type="button" class="btn btn-primary" id="selectUserBtn" disabled onclick="selectUser()">
              <i class="fas fa-check me-1"></i>
              Seleccionar Usuario
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Estilos para el modal de b√∫squeda -->
    <style>
        .user-result-card {
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .user-result-card:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .user-result-card.border-primary {
            border: 2px solid #007bff !important;
        }
        .user-result-card.bg-light {
            background-color: #f8f9fa !important;
        }
    </style>

    
</body>
</html>
